{
  "version": 3,
  "sources": ["../../../../../../node_modules/postcss-apply/node_modules/picocolors/picocolors.browser.js", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/css-syntax-error.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/stringifier.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/stringify.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/node.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/declaration.es6", "../../../../../../node_modules/source-map/lib/base64.js", "../../../../../../node_modules/source-map/lib/base64-vlq.js", "../../../../../../node_modules/source-map/lib/util.js", "../../../../../../node_modules/source-map/lib/array-set.js", "../../../../../../node_modules/source-map/lib/mapping-list.js", "../../../../../../node_modules/source-map/lib/source-map-generator.js", "../../../../../../node_modules/source-map/lib/binary-search.js", "../../../../../../node_modules/source-map/lib/quick-sort.js", "../../../../../../node_modules/source-map/lib/source-map-consumer.js", "../../../../../../node_modules/source-map/lib/source-node.js", "../../../../../../node_modules/source-map/source-map.js", "browser-external:path", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/map-generator.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/warn-once.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/warning.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/result.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/tokenize.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/comment.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/list.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/rule.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/container.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/at-rule.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/root.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/parser.es6", "browser-external:fs", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/previous-map.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/input.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/parse.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/lazy-result.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/processor.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/vendor.es6", "../../../../../../node_modules/postcss-apply/node_modules/postcss/lib/postcss.es6", "../../../../../../node_modules/balanced-match/index.js", "../../../../../../node_modules/postcss-apply/dist/index.m.js"],
  "sourcesContent": ["var x=String;\nvar create=function() {return {isColorSupported:false,reset:x,bold:x,dim:x,italic:x,underline:x,inverse:x,hidden:x,strikethrough:x,black:x,red:x,green:x,yellow:x,blue:x,magenta:x,cyan:x,white:x,gray:x,bgBlack:x,bgRed:x,bgGreen:x,bgYellow:x,bgBlue:x,bgMagenta:x,bgCyan:x,bgWhite:x}};\nmodule.exports=create();\nmodule.exports.createColors = create;\n", "import pico from 'picocolors'\n\nimport terminalHighlight from './terminal-highlight'\n\n/**\n * The CSS parser throws this error for broken CSS.\n *\n * Custom parsers can throw this error for broken custom syntax using\n * the {@link Node#error} method.\n *\n * PostCSS will use the input source map to detect the original error location.\n * If you wrote a Sass file, compiled it to CSS and then parsed it with PostCSS,\n * PostCSS will show the original position in the Sass file.\n *\n * If you need the position in the PostCSS input\n * (e.g., to debug the previous compiler), use `error.input.file`.\n *\n * @example\n * // Catching and checking syntax error\n * try {\n *   postcss.parse('a{')\n * } catch (error) {\n *   if (error.name === 'CssSyntaxError') {\n *     error //=> CssSyntaxError\n *   }\n * }\n *\n * @example\n * // Raising error from plugin\n * throw node.error('Unknown variable', { plugin: 'postcss-vars' })\n */\nclass CssSyntaxError extends Error {\n  /**\n   * @param {string} message  Error message.\n   * @param {number} [line]   Source line of the error.\n   * @param {number} [column] Source column of the error.\n   * @param {string} [source] Source code of the broken file.\n   * @param {string} [file]   Absolute path to the broken file.\n   * @param {string} [plugin] PostCSS plugin name, if error came from plugin.\n   */\n  constructor (message, line, column, source, file, plugin) {\n    super(message)\n\n    /**\n     * Always equal to `'CssSyntaxError'`. You should always check error type\n     * by `error.name === 'CssSyntaxError'`\n     * instead of `error instanceof CssSyntaxError`,\n     * because npm could have several PostCSS versions.\n     *\n     * @type {string}\n     *\n     * @example\n     * if (error.name === 'CssSyntaxError') {\n     *   error //=> CssSyntaxError\n     * }\n     */\n    this.name = 'CssSyntaxError'\n    /**\n     * Error message.\n     *\n     * @type {string}\n     *\n     * @example\n     * error.message //=> 'Unclosed block'\n     */\n    this.reason = message\n\n    if (file) {\n      /**\n       * Absolute path to the broken file.\n       *\n       * @type {string}\n       *\n       * @example\n       * error.file       //=> 'a.sass'\n       * error.input.file //=> 'a.css'\n       */\n      this.file = file\n    }\n    if (source) {\n      /**\n       * Source code of the broken file.\n       *\n       * @type {string}\n       *\n       * @example\n       * error.source       //=> 'a { b {} }'\n       * error.input.column //=> 'a b { }'\n       */\n      this.source = source\n    }\n    if (plugin) {\n      /**\n       * Plugin name, if error came from plugin.\n       *\n       * @type {string}\n       *\n       * @example\n       * error.plugin //=> 'postcss-vars'\n       */\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      /**\n       * Source line of the error.\n       *\n       * @type {number}\n       *\n       * @example\n       * error.line       //=> 2\n       * error.input.line //=> 4\n       */\n      this.line = line\n      /**\n       * Source column of the error.\n       *\n       * @type {number}\n       *\n       * @example\n       * error.column       //=> 1\n       * error.input.column //=> 4\n       */\n      this.column = column\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage () {\n    /**\n     * Full error text in the GNU error format\n     * with plugin, file, line and column.\n     *\n     * @type {string}\n     *\n     * @example\n     * error.message //=> 'a.css:1:1: Unclosed block'\n     */\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  /**\n   * Returns a few lines of CSS source that caused the error.\n   *\n   * If the CSS has an input source map without `sourceContent`,\n   * this method will return an empty string.\n   *\n   * @param {boolean} [color] Whether arrow will be colored red by terminal\n   *                          color codes. By default, PostCSS will detect\n   *                          color support by `process.stdout.isTTY`\n   *                          and `process.env.NODE_DISABLE_COLORS`.\n   *\n   * @example\n   * error.showSourceCode() //=> \"  4 | }\n   *                        //      5 | a {\n   *                        //    > 6 |   bad\n   *                        //        |   ^\n   *                        //      7 | }\n   *                        //      8 | b {\"\n   *\n   * @return {string} Few lines of CSS source that caused the error.\n   */\n  showSourceCode (color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (terminalHighlight) {\n      if (typeof color === 'undefined') color = pico.isColorSupported\n      if (color) css = terminalHighlight(css)\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n\n    let maxWidth = String(end).length\n\n    function mark (text) {\n      if (color && pico.red) {\n        return pico.red(pico.bold(text))\n      }\n      return text\n    }\n    function aside (text) {\n      if (color && pico.gray) {\n        return pico.gray(text)\n      }\n      return text\n    }\n\n    return lines\n      .slice(start, end)\n      .map((line, index) => {\n        let number = start + 1 + index\n        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n        if (number === this.line) {\n          let spacing =\n            aside(gutter.replace(/\\d/g, ' ')) +\n            line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n          return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^')\n        }\n        return ' ' + aside(gutter) + line\n      })\n      .join('\\n')\n  }\n\n  /**\n   * Returns error position, message and source code of the broken part.\n   *\n   * @example\n   * error.toString() //=> \"CssSyntaxError: app.css:1:1: Unclosed block\n   *                  //    > 1 | a {\n   *                  //        | ^\"\n   *\n   * @return {string} Error position, message and source code.\n   */\n  toString () {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n\n  /**\n   * @memberof CssSyntaxError#\n   * @member {Input} input Input object with PostCSS internal information\n   *                       about input file. If input has source map\n   *                       from previous tool, PostCSS will use origin\n   *                       (for example, Sass) source. You can use this\n   *                       object to get PostCSS input source.\n   *\n   * @example\n   * error.input.file //=> 'a.css'\n   * error.file       //=> 'a.sass'\n   */\n}\n\nexport default CssSyntaxError\n", "const DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n}\n\nfunction capitalize (str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor (builder) {\n    this.builder = builder\n  }\n\n  stringify (node, semicolon) {\n    this[node.type](node, semicolon)\n  }\n\n  root (node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment (node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl (node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  rule (node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  atrule (node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  body (node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  block (node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  raw (node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    // Hack for first rule in CSS\n    if (detect === 'before') {\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = { }\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawSemicolon (root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody (root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent (root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/[^\\s]/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawBeforeComment (root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.indexOf('\\n') !== -1) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/[^\\s]/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl (root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.indexOf('\\n') !== -1) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/[^\\s]/g, '')\n    }\n    return value\n  }\n\n  rawBeforeRule (root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.indexOf('\\n') !== -1) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/[^\\s]/g, '')\n    return value\n  }\n\n  rawBeforeClose (root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.indexOf('\\n') !== -1) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/[^\\s]/g, '')\n    return value\n  }\n\n  rawBeforeOpen (root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawColon (root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  beforeAfter (node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.indexOf('\\n') !== -1) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  rawValue (node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n}\n\nexport default Stringifier\n", "import Stringifier from './stringifier'\n\nfunction stringify (node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n\nexport default stringify\n", "import CssSyntaxError from './css-syntax-error'\nimport Stringifier from './stringifier'\nimport stringify from './stringify'\n\nfunction cloneNode (obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!obj.hasOwnProperty(i)) continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (value instanceof Array) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\n/**\n * All node classes inherit the following common methods.\n *\n * @abstract\n */\nclass Node {\n  /**\n   * @param {object} [defaults] Value for node properties.\n   */\n  constructor (defaults = { }) {\n    this.raws = { }\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof defaults !== 'object' && typeof defaults !== 'undefined') {\n        throw new Error(\n          'PostCSS nodes constructor accepts object, not ' +\n          JSON.stringify(defaults)\n        )\n      }\n    }\n    for (let name in defaults) {\n      this[name] = defaults[name]\n    }\n  }\n\n  /**\n   * Returns a `CssSyntaxError` instance containing the original position\n   * of the node in the source, showing line and column numbers and also\n   * a small excerpt to facilitate debugging.\n   *\n   * If present, an input source map will be used to get the original position\n   * of the source, even from a previous compilation step\n   * (e.g., from Sass compilation).\n   *\n   * This method produces very useful error messages.\n   *\n   * @param {string} message     Error description.\n   * @param {object} [opts]      Options.\n   * @param {string} opts.plugin Plugin name that created this error.\n   *                             PostCSS will set it automatically.\n   * @param {string} opts.word   A word inside a node’s string that should\n   *                             be highlighted as the source of the error.\n   * @param {number} opts.index  An index inside a node’s string that should\n   *                             be highlighted as the source of the error.\n   *\n   * @return {CssSyntaxError} Error object to throw it.\n   *\n   * @example\n   * if (!variables[name]) {\n   *   throw decl.error('Unknown variable ' + name, { word: name })\n   *   // CssSyntaxError: postcss-vars:a.sass:4:3: Unknown variable $black\n   *   //   color: $black\n   *   // a\n   *   //          ^\n   *   //   background: white\n   * }\n   */\n  error (message, opts = { }) {\n    if (this.source) {\n      let pos = this.positionBy(opts)\n      return this.source.input.error(message, pos.line, pos.column, opts)\n    }\n    return new CssSyntaxError(message)\n  }\n\n  /**\n   * This method is provided as a convenience wrapper for {@link Result#warn}.\n   *\n   * @param {Result} result      The {@link Result} instance\n   *                             that will receive the warning.\n   * @param {string} text        Warning message.\n   * @param {object} [opts]      Options\n   * @param {string} opts.plugin Plugin name that created this warning.\n   *                             PostCSS will set it automatically.\n   * @param {string} opts.word   A word inside a node’s string that should\n   *                             be highlighted as the source of the warning.\n   * @param {number} opts.index  An index inside a node’s string that should\n   *                             be highlighted as the source of the warning.\n   *\n   * @return {Warning} Created warning object.\n   *\n   * @example\n   * const plugin = postcss.plugin('postcss-deprecated', () => {\n   *   return (root, result) => {\n   *     root.walkDecls('bad', decl => {\n   *       decl.warn(result, 'Deprecated property bad')\n   *     })\n   *   }\n   * })\n   */\n  warn (result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  /**\n   * Removes the node from its parent and cleans the parent properties\n   * from the node and its children.\n   *\n   * @example\n   * if (decl.prop.match(/^-webkit-/)) {\n   *   decl.remove()\n   * }\n   *\n   * @return {Node} Node to make calls chain.\n   */\n  remove () {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  /**\n   * Returns a CSS string representing the node.\n   *\n   * @param {stringifier|syntax} [stringifier] A syntax to use\n   *                                           in string generation.\n   *\n   * @return {string} CSS string of this node.\n   *\n   * @example\n   * postcss.rule({ selector: 'a' }).toString() //=> \"a {}\"\n   */\n  toString (stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  /**\n   * Returns an exact clone of the node.\n   *\n   * The resulting cloned node and its (cloned) children will retain\n   * code style properties.\n   *\n   * @param {object} [overrides] New properties to override in the clone.\n   *\n   * @example\n   * decl.raws.before    //=> \"\\n  \"\n   * const cloned = decl.clone({ prop: '-moz-' + decl.prop })\n   * cloned.raws.before  //=> \"\\n  \"\n   * cloned.toString()   //=> -moz-transform: scale(0)\n   *\n   * @return {Node} Clone of the node.\n   */\n  clone (overrides = { }) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  /**\n   * Shortcut to clone the node and insert the resulting cloned node\n   * before the current node.\n   *\n   * @param {object} [overrides] Mew properties to override in the clone.\n   *\n   * @example\n   * decl.cloneBefore({ prop: '-moz-' + decl.prop })\n   *\n   * @return {Node} New node\n   */\n  cloneBefore (overrides = { }) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  /**\n   * Shortcut to clone the node and insert the resulting cloned node\n   * after the current node.\n   *\n   * @param {object} [overrides] New properties to override in the clone.\n   *\n   * @return {Node} New node.\n   */\n  cloneAfter (overrides = { }) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  /**\n   * Inserts node(s) before the current node and removes the current node.\n   *\n   * @param {...Node} nodes Mode(s) to replace current one.\n   *\n   * @example\n   * if (atrule.name === 'mixin') {\n   *   atrule.replaceWith(mixinRules[atrule.params])\n   * }\n   *\n   * @return {Node} Current node to methods chain.\n   */\n  replaceWith (...nodes) {\n    if (this.parent) {\n      for (let node of nodes) {\n        this.parent.insertBefore(this, node)\n      }\n\n      this.remove()\n    }\n\n    return this\n  }\n\n  /**\n   * Returns the next child of the node’s parent.\n   * Returns `undefined` if the current node is the last child.\n   *\n   * @return {Node|undefined} Next node.\n   *\n   * @example\n   * if (comment.text === 'delete next') {\n   *   const next = comment.next()\n   *   if (next) {\n   *     next.remove()\n   *   }\n   * }\n   */\n  next () {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  /**\n   * Returns the previous child of the node’s parent.\n   * Returns `undefined` if the current node is the first child.\n   *\n   * @return {Node|undefined} Previous node.\n   *\n   * @example\n   * const annotation = decl.prev()\n   * if (annotation.type === 'comment') {\n   *   readAnnotation(annotation.text)\n   * }\n   */\n  prev () {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  /**\n   * Insert new node before current node to current node’s parent.\n   *\n   * Just alias for `node.parent.insertBefore(node, add)`.\n   *\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * decl.before('content: \"\"')\n   */\n  before (add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  /**\n   * Insert new node after current node to current node’s parent.\n   *\n   * Just alias for `node.parent.insertAfter(node, add)`.\n   *\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * decl.after('color: black')\n   */\n  after (add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  toJSON () {\n    let fixed = { }\n\n    for (let name in this) {\n      if (!this.hasOwnProperty(name)) continue\n      if (name === 'parent') continue\n      let value = this[name]\n\n      if (value instanceof Array) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON()\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON()\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    return fixed\n  }\n\n  /**\n   * Returns a {@link Node#raws} value. If the node is missing\n   * the code style property (because the node was manually built or cloned),\n   * PostCSS will try to autodetect the code style property by looking\n   * at other nodes in the tree.\n   *\n   * @param {string} prop          Name of code style property.\n   * @param {string} [defaultType] Name of default value, it can be missed\n   *                               if the value is the same as prop.\n   *\n   * @example\n   * const root = postcss.parse('a { background: white }')\n   * root.nodes[0].append({ prop: 'color', value: 'black' })\n   * root.nodes[0].nodes[1].raws.before   //=> undefined\n   * root.nodes[0].nodes[1].raw('before') //=> ' '\n   *\n   * @return {string} Code style value.\n   */\n  raw (prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  /**\n   * Finds the Root instance of the node’s tree.\n   *\n   * @example\n   * root.nodes[0].nodes[0].root() === root\n   *\n   * @return {Root} Root parent.\n   */\n  root () {\n    let result = this\n    while (result.parent) result = result.parent\n    return result\n  }\n\n  /**\n   * Clear the code style properties for the node and its children.\n   *\n   * @param {boolean} [keepBetween] Keep the raws.between symbols.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * node.raws.before  //=> ' '\n   * node.cleanRaws()\n   * node.raws.before  //=> undefined\n   */\n  cleanRaws (keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  positionInside (index) {\n    let string = this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { line, column }\n  }\n\n  positionBy (opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  /**\n   * @memberof Node#\n   * @member {string} type String representing the node’s type.\n   *                       Possible values are `root`, `atrule`, `rule`,\n   *                       `decl`, or `comment`.\n   *\n   * @example\n   * postcss.decl({ prop: 'color', value: 'black' }).type //=> 'decl'\n   */\n\n  /**\n   * @memberof Node#\n   * @member {Container} parent The node’s parent node.\n   *\n   * @example\n   * root.nodes[0].parent === root\n   */\n\n  /**\n   * @memberof Node#\n   * @member {source} source The input source of the node.\n   *\n   * The property is used in source map generation.\n   *\n   * If you create a node manually (e.g., with `postcss.decl()`),\n   * that node will not have a `source` property and will be absent\n   * from the source map. For this reason, the plugin developer should\n   * consider cloning nodes to create new ones (in which case the new node’s\n   * source will reference the original, cloned node) or setting\n   * the `source` property manually.\n   *\n   * ```js\n   * // Bad\n   * const prefixed = postcss.decl({\n   *   prop: '-moz-' + decl.prop,\n   *   value: decl.value\n   * })\n   *\n   * // Good\n   * const prefixed = decl.clone({ prop: '-moz-' + decl.prop })\n   * ```\n   *\n   * ```js\n   * if (atrule.name === 'add-link') {\n   *   const rule = postcss.rule({ selector: 'a', source: atrule.source })\n   *   atrule.parent.insertBefore(atrule, rule)\n   * }\n   * ```\n   *\n   * @example\n   * decl.source.input.from //=> '/home/ai/a.sass'\n   * decl.source.start      //=> { line: 10, column: 2 }\n   * decl.source.end        //=> { line: 10, column: 12 }\n   */\n\n  /**\n   * @memberof Node#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node. It also stores `*`\n   *   and `_` symbols before the declaration (IE hack).\n   * * `after`: the space symbols after the last child of the node\n   *   to the end of the node.\n   * * `between`: the symbols between the property and value\n   *   for declarations, selector and `{` for rules, or last parameter\n   *   and `{` for at-rules.\n   * * `semicolon`: contains true if the last child has\n   *   an (optional) semicolon.\n   * * `afterName`: the space between the at-rule name and its parameters.\n   * * `left`: the space symbols between `/*` and the comment’s text.\n   * * `right`: the space symbols between the comment’s text\n   *   and <code>*&#47;</code>.\n   * * `important`: the content of the important statement,\n   *   if it is not just `!important`.\n   *\n   * PostCSS cleans selectors, declaration values and at-rule parameters\n   * from comments and extra spaces, but it stores origin content in raws\n   * properties. As such, if you don’t change a declaration’s value,\n   * PostCSS will use the raw value with comments.\n   *\n   * @example\n   * const root = postcss.parse('a {\\n  color:black\\n}')\n   * root.first.first.raws //=> { before: '\\n  ', between: ':' }\n   */\n}\n\nexport default Node\n\n/**\n * @typedef {object} position\n * @property {number} line   Source line in file.\n * @property {number} column Source column in file.\n */\n\n/**\n * @typedef {object} source\n * @property {Input} input    {@link Input} with input file\n * @property {position} start The starting position of the node’s source.\n * @property {position} end   The ending position of the node’s source.\n */\n", "import Node from './node'\n\n/**\n * Represents a CSS declaration.\n *\n * @extends Node\n *\n * @example\n * const root = postcss.parse('a { color: black }')\n * const decl = root.first.first\n * decl.type       //=> 'decl'\n * decl.toString() //=> ' color: black'\n */\nclass Declaration extends Node {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  /**\n   * @memberof Declaration#\n   * @member {string} prop The declaration’s property name.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black }')\n   * const decl = root.first.first\n   * decl.prop //=> 'color'\n   */\n\n  /**\n   * @memberof Declaration#\n   * @member {string} value The declaration’s value.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black }')\n   * const decl = root.first.first\n   * decl.value //=> 'black'\n   */\n\n  /**\n   * @memberof Declaration#\n   * @member {boolean} important `true` if the declaration\n   *                             has an !important annotation.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black !important; color: red }')\n   * root.first.first.important //=> true\n   * root.first.last.important  //=> undefined\n   */\n\n  /**\n   * @memberof Declaration#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node. It also stores `*`\n   *   and `_` symbols before the declaration (IE hack).\n   * * `between`: the symbols between the property and value\n   *   for declarations.\n   * * `important`: the content of the important statement,\n   *   if it is not just `!important`.\n   *\n   * PostCSS cleans declaration from comments and extra spaces,\n   * but it stores origin content in raws properties.\n   * As such, if you don’t change a declaration’s value,\n   * PostCSS will use the raw value with comments.\n   *\n   * @example\n   * const root = postcss.parse('a {\\n  color:black\\n}')\n   * root.first.first.raws //=> { before: '\\n  ', between: ':' }\n   */\n}\n\nexport default Declaration\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nfunction normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n\n  var parts = path.split(/\\/+/);\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n}\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 === null) {\n    return 1; // aStr2 !== null\n  }\n\n  if (aStr2 === null) {\n    return -1; // aStr1 !== null\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n/**\n * Strip any JSON XSSI avoidance prefix from the string (as documented\n * in the source maps specification), and then parse the string as\n * JSON.\n */\nfunction parseSourceMapInput(str) {\n  return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, ''));\n}\nexports.parseSourceMapInput = parseSourceMapInput;\n\n/**\n * Compute the URL of a source given the the source root, the source's\n * URL, and the source map's URL.\n */\nfunction computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n  sourceURL = sourceURL || '';\n\n  if (sourceRoot) {\n    // This follows what Chrome does.\n    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {\n      sourceRoot += '/';\n    }\n    // The spec says:\n    //   Line 4: An optional source root, useful for relocating source\n    //   files on a server or removing repeated values in the\n    //   “sources” entry.  This value is prepended to the individual\n    //   entries in the “source” field.\n    sourceURL = sourceRoot + sourceURL;\n  }\n\n  // Historically, SourceMapConsumer did not take the sourceMapURL as\n  // a parameter.  This mode is still somewhat supported, which is why\n  // this code block is conditional.  However, it's preferable to pass\n  // the source map URL to SourceMapConsumer, so that this function\n  // can implement the source URL resolution algorithm as outlined in\n  // the spec.  This block is basically the equivalent of:\n  //    new URL(sourceURL, sourceMapURL).toString()\n  // ... except it avoids using URL, which wasn't available in the\n  // older releases of node still supported by this library.\n  //\n  // The spec says:\n  //   If the sources are not absolute URLs after prepending of the\n  //   “sourceRoot”, the sources are resolved relative to the\n  //   SourceMap (like resolving script src in a html document).\n  if (sourceMapURL) {\n    var parsed = urlParse(sourceMapURL);\n    if (!parsed) {\n      throw new Error(\"sourceMapURL could not be parsed\");\n    }\n    if (parsed.path) {\n      // Strip the last path component, but keep the \"/\".\n      var index = parsed.path.lastIndexOf('/');\n      if (index >= 0) {\n        parsed.path = parsed.path.substring(0, index + 1);\n      }\n    }\n    sourceURL = join(urlGenerate(parsed), sourceURL);\n  }\n\n  return normalize(sourceURL);\n}\nexports.computeSourceURL = computeSourceURL;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a neglibable overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nfunction MappingList() {\n  this._array = [];\n  this._sorted = true;\n  // Serves as infimum\n  this._last = {generatedLine: -1, generatedColumn: 0};\n}\n\n/**\n * Iterate through internal items. This method takes the same arguments that\n * `Array.prototype.forEach` takes.\n *\n * NOTE: The order of the mappings is NOT guaranteed.\n */\nMappingList.prototype.unsortedForEach =\n  function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n/**\n * Add the given source mapping.\n *\n * @param Object aMapping\n */\nMappingList.prototype.add = function MappingList_add(aMapping) {\n  if (generatedPositionAfter(this._last, aMapping)) {\n    this._last = aMapping;\n    this._array.push(aMapping);\n  } else {\n    this._sorted = false;\n    this._array.push(aMapping);\n  }\n};\n\n/**\n * Returns the flat, sorted array of mappings. The mappings are sorted by\n * generated position.\n *\n * WARNING: This method returns internal data without copying, for\n * performance. The return value must NOT be mutated, and should be treated as\n * an immutable borrow. If you want to take ownership, you must make your own\n * copy.\n */\nMappingList.prototype.toArray = function MappingList_toArray() {\n  if (!this._sorted) {\n    this._array.sort(util.compareByGeneratedPositionsInflated);\n    this._sorted = true;\n  }\n  return this._array;\n};\n\nexports.MappingList = MappingList;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar base64VLQ = require('./base64-vlq');\nvar util = require('./util');\nvar ArraySet = require('./array-set').ArraySet;\nvar MappingList = require('./mapping-list').MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\nSourceMapGenerator.fromSourceMap =\n  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot: sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      var newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  };\n\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\nSourceMapGenerator.prototype.addMapping =\n  function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, 'generated');\n    var original = util.getArg(aArgs, 'original', null);\n    var source = util.getArg(aArgs, 'source', null);\n    var name = util.getArg(aArgs, 'name', null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source: source,\n      name: name\n    });\n  };\n\n/**\n * Set the source content for a source file.\n */\nSourceMapGenerator.prototype.setSourceContent =\n  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  };\n\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\nSourceMapGenerator.prototype.applySourceMap =\n  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        var original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source)\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      var source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      var name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          sourceFile = util.join(aSourceMapPath, sourceFile);\n        }\n        if (sourceRoot != null) {\n          sourceFile = util.relative(sourceRoot, sourceFile);\n        }\n        this.setSourceContent(sourceFile, content);\n      }\n    }, this);\n  };\n\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\nSourceMapGenerator.prototype._validateMapping =\n  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                              aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {\n        throw new Error(\n            'original.line and original.column are not numbers -- you probably meant to omit ' +\n            'the original mapping entirely and only map the generated position. If so, pass ' +\n            'null for the original mapping instead of an object with empty or null values.'\n        );\n    }\n\n    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n      return;\n    }\n    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n             && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n      return;\n    }\n    else {\n      throw new Error('Invalid mapping: ' + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  };\n\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\nSourceMapGenerator.prototype._serializeMappings =\n  function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = '';\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n\n    var mappings = this._mappings.toArray();\n    for (var i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = ''\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += ';';\n          previousGeneratedLine++;\n        }\n      }\n      else {\n        if (i > 0) {\n          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n            continue;\n          }\n          next += ',';\n        }\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  };\n\nSourceMapGenerator.prototype._generateSourcesContent =\n  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      var key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  };\n\n/**\n * Externalize the source map.\n */\nSourceMapGenerator.prototype.toJSON =\n  function SourceMapGenerator_toJSON() {\n    var map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  };\n\n/**\n * Render the source map being generated to a string.\n */\nSourceMapGenerator.prototype.toString =\n  function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\nexports.SourceMapGenerator = SourceMapGenerator;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number is 1-based.\n *   - column: Optional. the column number in the original source.\n *    The column number is 0-based.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *    line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *    The column number is 0-based.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Utility function to find the index of a source.  Returns -1 if not\n * found.\n */\nBasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  }\n\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n  var i;\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @param String aSourceMapURL\n *        The URL at which the source map can be found (optional)\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n    smc._sourceMapURL = aSourceMapURL;\n    smc._absoluteSources = smc._sources.toArray().map(function (s) {\n      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n    });\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    var index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    var relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based. \n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = null;\n        if (mapping.name) {\n          name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\nvar util = require('./util');\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nvar REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nvar NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nvar isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nfunction SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n  this.children = [];\n  this.sourceContents = {};\n  this.line = aLine == null ? null : aLine;\n  this.column = aColumn == null ? null : aColumn;\n  this.source = aSource == null ? null : aSource;\n  this.name = aName == null ? null : aName;\n  this[isSourceNode] = true;\n  if (aChunks != null) this.add(aChunks);\n}\n\n/**\n * Creates a SourceNode from generated code and a SourceMapConsumer.\n *\n * @param aGeneratedCode The generated code\n * @param aSourceMapConsumer The SourceMap for the generated code\n * @param aRelativePath Optional. The path that relative sources in the\n *        SourceMapConsumer should be relative to.\n */\nSourceNode.fromStringWithSourceMap =\n  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    var node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    var remainingLinesIndex = 0;\n    var shiftNextLine = function() {\n      var lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      var newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    var lastMapping = null;\n\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          var nextLine = remainingLines[remainingLinesIndex] || '';\n          var code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        var nextLine = remainingLines[remainingLinesIndex] || '';\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        var source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  };\n\n/**\n * Add a chunk of generated JS to this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.add = function SourceNode_add(aChunk) {\n  if (Array.isArray(aChunk)) {\n    aChunk.forEach(function (chunk) {\n      this.add(chunk);\n    }, this);\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    if (aChunk) {\n      this.children.push(aChunk);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Add a chunk of generated JS to the beginning of this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n  if (Array.isArray(aChunk)) {\n    for (var i = aChunk.length-1; i >= 0; i--) {\n      this.prepend(aChunk[i]);\n    }\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    this.children.unshift(aChunk);\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Walk over the tree of JS snippets in this node and its children. The\n * walking function is called once for each snippet of JS and is passed that\n * snippet and the its original associated source's line/column location.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walk = function SourceNode_walk(aFn) {\n  var chunk;\n  for (var i = 0, len = this.children.length; i < len; i++) {\n    chunk = this.children[i];\n    if (chunk[isSourceNode]) {\n      chunk.walk(aFn);\n    }\n    else {\n      if (chunk !== '') {\n        aFn(chunk, { source: this.source,\n                     line: this.line,\n                     column: this.column,\n                     name: this.name });\n      }\n    }\n  }\n};\n\n/**\n * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n * each of `this.children`.\n *\n * @param aSep The separator.\n */\nSourceNode.prototype.join = function SourceNode_join(aSep) {\n  var newChildren;\n  var i;\n  var len = this.children.length;\n  if (len > 0) {\n    newChildren = [];\n    for (i = 0; i < len-1; i++) {\n      newChildren.push(this.children[i]);\n      newChildren.push(aSep);\n    }\n    newChildren.push(this.children[i]);\n    this.children = newChildren;\n  }\n  return this;\n};\n\n/**\n * Call String.prototype.replace on the very right-most source snippet. Useful\n * for trimming whitespace from the end of a source node, etc.\n *\n * @param aPattern The pattern to replace.\n * @param aReplacement The thing to replace the pattern with.\n */\nSourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n  var lastChild = this.children[this.children.length - 1];\n  if (lastChild[isSourceNode]) {\n    lastChild.replaceRight(aPattern, aReplacement);\n  }\n  else if (typeof lastChild === 'string') {\n    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n  }\n  else {\n    this.children.push(''.replace(aPattern, aReplacement));\n  }\n  return this;\n};\n\n/**\n * Set the source content for a source file. This will be added to the SourceMapGenerator\n * in the sourcesContent field.\n *\n * @param aSourceFile The filename of the source file\n * @param aSourceContent The content of the source file\n */\nSourceNode.prototype.setSourceContent =\n  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  };\n\n/**\n * Walk over the tree of SourceNodes. The walking function is called for each\n * source file content and is passed the filename and source content.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walkSourceContents =\n  function SourceNode_walkSourceContents(aFn) {\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    var sources = Object.keys(this.sourceContents);\n    for (var i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  };\n\n/**\n * Return the string representation of this source node. Walks over the tree\n * and concatenates all the various snippets together to one string.\n */\nSourceNode.prototype.toString = function SourceNode_toString() {\n  var str = \"\";\n  this.walk(function (chunk) {\n    str += chunk;\n  });\n  return str;\n};\n\n/**\n * Returns the string representation of this source node along with a source\n * map.\n */\nSourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n  var generated = {\n    code: \"\",\n    line: 1,\n    column: 0\n  };\n  var map = new SourceMapGenerator(aArgs);\n  var sourceMappingActive = false;\n  var lastOriginalSource = null;\n  var lastOriginalLine = null;\n  var lastOriginalColumn = null;\n  var lastOriginalName = null;\n  this.walk(function (chunk, original) {\n    generated.code += chunk;\n    if (original.source !== null\n        && original.line !== null\n        && original.column !== null) {\n      if(lastOriginalSource !== original.source\n         || lastOriginalLine !== original.line\n         || lastOriginalColumn !== original.column\n         || lastOriginalName !== original.name) {\n        map.addMapping({\n          source: original.source,\n          original: {\n            line: original.line,\n            column: original.column\n          },\n          generated: {\n            line: generated.line,\n            column: generated.column\n          },\n          name: original.name\n        });\n      }\n      lastOriginalSource = original.source;\n      lastOriginalLine = original.line;\n      lastOriginalColumn = original.column;\n      lastOriginalName = original.name;\n      sourceMappingActive = true;\n    } else if (sourceMappingActive) {\n      map.addMapping({\n        generated: {\n          line: generated.line,\n          column: generated.column\n        }\n      });\n      lastOriginalSource = null;\n      sourceMappingActive = false;\n    }\n    for (var idx = 0, length = chunk.length; idx < length; idx++) {\n      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n        generated.line++;\n        generated.column = 0;\n        // Mappings end at eol\n        if (idx + 1 === length) {\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n      } else {\n        generated.column++;\n      }\n    }\n  });\n  this.walkSourceContents(function (sourceFile, sourceContent) {\n    map.setSourceContent(sourceFile, sourceContent);\n  });\n\n  return { code: generated.code, map: map };\n};\n\nexports.SourceNode = SourceNode;\n", "/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;\nexports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;\nexports.SourceNode = require('./lib/source-node').SourceNode;\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"path\" has been externalized for browser compatibility. Cannot access \"path.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "import mozilla from 'source-map'\nimport path from 'path'\n\nclass MapGenerator {\n  constructor (stringify, root, opts) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || { }\n    this.root = root\n    this.opts = opts\n  }\n\n  isMap () {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  previous () {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      this.root.walk(node => {\n        if (node.source && node.source.input.map) {\n          let map = node.source.input.map\n          if (this.previousMaps.indexOf(map) === -1) {\n            this.previousMaps.push(map)\n          }\n        }\n      })\n    }\n\n    return this.previousMaps\n  }\n\n  isInline () {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isSourcesContent () {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  clearAnnotation () {\n    if (this.mapOpts.annotation === false) return\n\n    let node\n    for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n      node = this.root.nodes[i]\n      if (node.type !== 'comment') continue\n      if (node.text.indexOf('# sourceMappingURL=') === 0) {\n        this.root.removeChild(i)\n      }\n    }\n  }\n\n  setSourcesContent () {\n    let already = { }\n    this.root.walk(node => {\n      if (node.source) {\n        let from = node.source.input.from\n        if (from && !already[from]) {\n          already[from] = true\n          let relative = this.relative(from)\n          this.map.setSourceContent(relative, node.source.input.css)\n        }\n      }\n    })\n  }\n\n  applyPrevMaps () {\n    for (let prev of this.previous()) {\n      let from = this.relative(prev.file)\n      let root = prev.root || path.dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new mozilla.SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null)\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.relative(root))\n    }\n  }\n\n  isAnnotation () {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  toBase64 (str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    }\n    return window.btoa(unescape(encodeURIComponent(str)))\n  }\n\n  addAnnotation () {\n    let content\n\n    if (this.isInline()) {\n      content = 'data:application/json;base64,' +\n                this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else {\n      content = this.outputFile() + '.map'\n    }\n\n    let eol = '\\n'\n    if (this.css.indexOf('\\r\\n') !== -1) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  outputFile () {\n    if (this.opts.to) {\n      return this.relative(this.opts.to)\n    }\n    if (this.opts.from) {\n      return this.relative(this.opts.from)\n    }\n    return 'to.css'\n  }\n\n  generateMap () {\n    this.generateString()\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    }\n    return [this.css, this.map]\n  }\n\n  relative (file) {\n    if (file.indexOf('<') === 0) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n\n    let from = this.opts.to ? path.dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = path.dirname(path.resolve(from, this.mapOpts.annotation))\n    }\n\n    file = path.relative(from, file)\n    if (path.sep === '\\\\') {\n      return file.replace(/\\\\/g, '/')\n    }\n    return file\n  }\n\n  sourcePath (node) {\n    if (this.mapOpts.from) {\n      return this.mapOpts.from\n    }\n    return this.relative(node.source.input.from)\n  }\n\n  generateString () {\n    this.css = ''\n    this.map = new mozilla.SourceMapGenerator({ file: this.outputFile() })\n\n    let line = 1\n    let column = 1\n\n    let lines, last\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        if (node.source && node.source.start) {\n          this.map.addMapping({\n            source: this.sourcePath(node),\n            generated: { line, column: column - 1 },\n            original: {\n              line: node.source.start.line,\n              column: node.source.start.column - 1\n            }\n          })\n        } else {\n          this.map.addMapping({\n            source: '<no source>',\n            original: { line: 1, column: 0 },\n            generated: { line, column: column - 1 }\n          })\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: { } }\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            this.map.addMapping({\n              source: this.sourcePath(node),\n              generated: { line, column: column - 2 },\n              original: {\n                line: node.source.end.line,\n                column: node.source.end.column - 1\n              }\n            })\n          } else {\n            this.map.addMapping({\n              source: '<no source>',\n              original: { line: 1, column: 0 },\n              generated: { line, column: column - 1 }\n            })\n          }\n        }\n      }\n    })\n  }\n\n  generate () {\n    this.clearAnnotation()\n\n    if (this.isMap()) {\n      return this.generateMap()\n    }\n\n    let result = ''\n    this.stringify(this.root, i => {\n      result += i\n    })\n    return [result]\n  }\n}\n\nexport default MapGenerator\n", "let printed = { }\n\nexport default function warnOnce (message) {\n  if (printed[message]) return\n  printed[message] = true\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(message)\n  }\n}\n", "/**\n * Represents a plugin’s warning. It can be created using {@link Node#warn}.\n *\n * @example\n * if (decl.important) {\n *   decl.warn(result, 'Avoid !important', { word: '!important' })\n * }\n */\nclass Warning {\n  /**\n   * @param {string} text        Warning message.\n   * @param {Object} [opts]      Warning options.\n   * @param {Node}   opts.node   CSS node that caused the warning.\n   * @param {string} opts.word   Word in CSS source that caused the warning.\n   * @param {number} opts.index  Index in CSS node string that caused\n   *                             the warning.\n   * @param {string} opts.plugin Name of the plugin that created\n   *                             this warning. {@link Result#warn} fills\n   *                             this property automatically.\n   */\n  constructor (text, opts = { }) {\n    /**\n     * Type to filter warnings from {@link Result#messages}.\n     * Always equal to `\"warning\"`.\n     *\n     * @type {string}\n     *\n     * @example\n     * const nonWarning = result.messages.filter(i => i.type !== 'warning')\n     */\n    this.type = 'warning'\n    /**\n     * The warning message.\n     *\n     * @type {string}\n     *\n     * @example\n     * warning.text //=> 'Try to avoid !important'\n     */\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      let pos = opts.node.positionBy(opts)\n      /**\n       * Line in the input file with this warning’s source.\n       * @type {number}\n       *\n       * @example\n       * warning.line //=> 5\n       */\n      this.line = pos.line\n      /**\n       * Column in the input file with this warning’s source.\n       *\n       * @type {number}\n       *\n       * @example\n       * warning.column //=> 6\n       */\n      this.column = pos.column\n    }\n\n    for (let opt in opts) this[opt] = opts[opt]\n  }\n\n  /**\n   * Returns a warning position and message.\n   *\n   * @example\n   * warning.toString() //=> 'postcss-lint:a.css:10:14: Avoid !important'\n   *\n   * @return {string} Warning position and message.\n   */\n  toString () {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n\n  /**\n   * @memberof Warning#\n   * @member {string} plugin The name of the plugin that created\n   *                         it will fill this property automatically.\n   *                         this warning. When you call {@link Node#warn}\n   *\n   * @example\n   * warning.plugin //=> 'postcss-important'\n   */\n\n  /**\n   * @memberof Warning#\n   * @member {Node} node Contains the CSS node that caused the warning.\n   *\n   * @example\n   * warning.node.toString() //=> 'color: white !important'\n   */\n}\n\nexport default Warning\n", "import Warning from './warning'\n\n/**\n * Provides the result of the PostCSS transformations.\n *\n * A Result instance is returned by {@link LazyResult#then}\n * or {@link Root#toResult} methods.\n *\n * @example\n * postcss([autoprefixer]).process(css).then(result => {\n *  console.log(result.css)\n * })\n *\n * @example\n * const result2 = postcss.parse(css).toResult()\n */\nclass Result {\n  /**\n   * @param {Processor} processor Processor used for this transformation.\n   * @param {Root}      root      Root node after all transformations.\n   * @param {processOptions} opts Options from the {@link Processor#process}\n   *                              or {@link Root#toResult}.\n   */\n  constructor (processor, root, opts) {\n    /**\n     * The Processor instance used for this transformation.\n     *\n     * @type {Processor}\n     *\n     * @example\n     * for (const plugin of result.processor.plugins) {\n     *   if (plugin.postcssPlugin === 'postcss-bad') {\n     *     throw 'postcss-good is incompatible with postcss-bad'\n     *   }\n     * })\n     */\n    this.processor = processor\n    /**\n     * Contains messages from plugins (e.g., warnings or custom messages).\n     * Each message should have type and plugin properties.\n     *\n     * @type {Message[]}\n     *\n     * @example\n     * postcss.plugin('postcss-min-browser', () => {\n     *   return (root, result) => {\n     *     const browsers = detectMinBrowsersByCanIUse(root)\n     *     result.messages.push({\n     *       type: 'min-browser',\n     *       plugin: 'postcss-min-browser',\n     *       browsers\n     *     })\n     *   }\n     * })\n     */\n    this.messages = []\n    /**\n     * Root node after all transformations.\n     *\n     * @type {Root}\n     *\n     * @example\n     * root.toResult().root === root\n     */\n    this.root = root\n    /**\n     * Options from the {@link Processor#process} or {@link Root#toResult} call\n     * that produced this Result instance.\n     *\n     * @type {processOptions}\n     *\n     * @example\n     * root.toResult(opts).opts === opts\n     */\n    this.opts = opts\n    /**\n     * A CSS string representing of {@link Result#root}.\n     *\n     * @type {string}\n     *\n     * @example\n     * postcss.parse('a{}').toResult().css //=> \"a{}\"\n     */\n    this.css = undefined\n    /**\n     * An instance of `SourceMapGenerator` class from the `source-map` library,\n     * representing changes to the {@link Result#root} instance.\n     *\n     * @type {SourceMapGenerator}\n     *\n     * @example\n     * result.map.toJSON() //=> { version: 3, file: 'a.css', … }\n     *\n     * @example\n     * if (result.map) {\n     *   fs.writeFileSync(result.opts.to + '.map', result.map.toString())\n     * }\n     */\n    this.map = undefined\n  }\n\n  /**\n   * Returns for @{link Result#css} content.\n   *\n   * @example\n   * result + '' === result.css\n   *\n   * @return {string} String representing of {@link Result#root}.\n   */\n  toString () {\n    return this.css\n  }\n\n  /**\n   * Creates an instance of {@link Warning} and adds it\n   * to {@link Result#messages}.\n   *\n   * @param {string} text        Warning message.\n   * @param {Object} [opts]      Warning options.\n   * @param {Node}   opts.node   CSS node that caused the warning.\n   * @param {string} opts.word   Word in CSS source that caused the warning.\n   * @param {number} opts.index  Index in CSS node string that caused\n   *                             the warning.\n   * @param {string} opts.plugin Name of the plugin that created\n   *                             this warning. {@link Result#warn} fills\n   *                             this property automatically.\n   *\n   * @return {Warning} Created warning.\n   */\n  warn (text, opts = { }) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    let warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  /**\n     * Returns warnings from plugins. Filters {@link Warning} instances\n     * from {@link Result#messages}.\n     *\n     * @example\n     * result.warnings().forEach(warn => {\n     *   console.warn(warn.toString())\n     * })\n     *\n     * @return {Warning[]} Warnings from plugins.\n     */\n  warnings () {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  /**\n   * An alias for the {@link Result#css} property.\n   * Use it with syntaxes that generate non-CSS output.\n   *\n   * @type {string}\n   *\n   * @example\n   * result.css === result.content\n   */\n  get content () {\n    return this.css\n  }\n}\n\nexport default Result\n\n/**\n * @typedef  {object} Message\n * @property {string} type   Message type.\n * @property {string} plugin Source PostCSS plugin name.\n */\n", "const SINGLE_QUOTE = '\\''.charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[ \\n\\t\\r\\f{}()'\"\\\\;/[\\]#]/g\nconst RE_WORD_END = /[ \\n\\t\\r\\f(){}:;@!'\"\\\\\\][#]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\\\/(\"'\\n]/\nconst RE_HEX_ESCAPE = /[a-f0-9]/i\n\nexport default function tokenizer (input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, next, quote, lines, last, content, escape\n  let nextLine, nextOffset, escaped, escapePos, prev, n, currentToken\n\n  let length = css.length\n  let offset = -1\n  let line = 1\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position () {\n    return pos\n  }\n\n  function unclosed (what) {\n    throw input.error('Unclosed ' + what, line, pos - offset)\n  }\n\n  function endOfFile () {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken (opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n    if (\n      code === NEWLINE || code === FEED ||\n      (code === CR && css.charCodeAt(pos + 1) !== NEWLINE)\n    ) {\n      offset = pos\n      line += 1\n    }\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED:\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n          if (code === NEWLINE) {\n            offset = next\n            line += 1\n          }\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES:\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, line, pos - offset]\n        break\n\n      case OPEN_PARENTHESES:\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE &&\n          n !== SPACE && n !== NEWLINE && n !== TAB &&\n          n !== FEED && n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1),\n            line, pos - offset,\n            line, next - offset\n          ]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', line, pos - offset]\n          } else {\n            currentToken = ['brackets', content,\n              line, pos - offset,\n              line, next - offset\n            ]\n            pos = next\n          }\n        }\n\n        break\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE:\n        quote = code === SINGLE_QUOTE ? '\\'' : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        content = css.slice(pos, next + 1)\n        lines = content.split('\\n')\n        last = lines.length - 1\n\n        if (last > 0) {\n          nextLine = line + last\n          nextOffset = next - lines[last].length\n        } else {\n          nextLine = line\n          nextOffset = offset\n        }\n\n        currentToken = ['string', css.slice(pos, next + 1),\n          line, pos - offset,\n          nextLine, next - nextOffset\n        ]\n\n        offset = nextOffset\n        line = nextLine\n        pos = next\n        break\n\n      case AT:\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1),\n          line, pos - offset,\n          line, next - offset\n        ]\n\n        pos = next\n        break\n\n      case BACKSLASH:\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1),\n          line, pos - offset,\n          line, next - offset\n        ]\n\n        pos = next\n        break\n\n      default:\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          content = css.slice(pos, next + 1)\n          lines = content.split('\\n')\n          last = lines.length - 1\n\n          if (last > 0) {\n            nextLine = line + last\n            nextOffset = next - lines[last].length\n          } else {\n            nextLine = line\n            nextOffset = offset\n          }\n\n          currentToken = ['comment', content,\n            line, pos - offset,\n            nextLine, next - nextOffset\n          ]\n\n          offset = nextOffset\n          line = nextLine\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1),\n            line, pos - offset,\n            line, next - offset\n          ]\n\n          buffer.push(currentToken)\n\n          pos = next\n        }\n\n        break\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back (token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    nextToken,\n    endOfFile,\n    position\n  }\n}\n", "import Node from './node'\n\n/**\n * Represents a comment between declarations or statements (rule and at-rules).\n *\n * Comments inside selectors, at-rule parameters, or declaration values\n * will be stored in the `raws` properties explained above.\n *\n * @extends Node\n */\nclass Comment extends Node {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n\n  /**\n   * @memberof Comment#\n   * @member {string} text The comment’s text.\n   */\n\n  /**\n   * @memberof Comment#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node.\n   * * `left`: the space symbols between `/*` and the comment’s text.\n   * * `right`: the space symbols between the comment’s text.\n   */\n}\n\nexport default Comment\n", "/**\n * Contains helpers for safely splitting lists of CSS values,\n * preserving parentheses and quotes.\n *\n * @example\n * const list = postcss.list\n *\n * @namespace list\n */\nlet list = {\n\n  split (string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let quote = false\n    let escape = false\n\n    for (let i = 0; i < string.length; i++) {\n      let letter = string[i]\n\n      if (quote) {\n        if (escape) {\n          escape = false\n        } else if (letter === '\\\\') {\n          escape = true\n        } else if (letter === quote) {\n          quote = false\n        }\n      } else if (letter === '\"' || letter === '\\'') {\n        quote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.indexOf(letter) !== -1) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  /**\n   * Safely splits space-separated values (such as those for `background`,\n   * `border-radius`, and other shorthand properties).\n   *\n   * @param {string} string Space-separated values.\n   *\n   * @return {string[]} Split values.\n   *\n   * @example\n   * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']\n   */\n  space (string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  /**\n   * Safely splits comma-separated values (such as those for `transition-*`\n   * and `background` properties).\n   *\n   * @param {string} string Comma-separated values.\n   *\n   * @return {string[]} Split values.\n   *\n   * @example\n   * postcss.list.comma('black, linear-gradient(white, black)')\n   * //=> ['black', 'linear-gradient(white, black)']\n   */\n  comma (string) {\n    return list.split(string, [','], true)\n  }\n\n}\n\nexport default list\n", "import Container from './container'\nimport list from './list'\n\n/**\n * Represents a CSS rule: a selector followed by a declaration block.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{}')\n * const rule = root.first\n * rule.type       //=> 'rule'\n * rule.toString() //=> 'a{}'\n */\nclass Rule extends Container {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  /**\n   * An array containing the rule’s individual selectors.\n   * Groups of selectors are split at commas.\n   *\n   * @type {string[]}\n   *\n   * @example\n   * const root = postcss.parse('a, b { }')\n   * const rule = root.first\n   *\n   * rule.selector  //=> 'a, b'\n   * rule.selectors //=> ['a', 'b']\n   *\n   * rule.selectors = ['a', 'strong']\n   * rule.selector //=> 'a, strong'\n   */\n  get selectors () {\n    return list.comma(this.selector)\n  }\n\n  set selectors (values) {\n    let match = this.selector ? this.selector.match(/,\\s*/) : null\n    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n\n  /**\n   * @memberof Rule#\n   * @member {string} selector The rule’s full selector represented\n   *                           as a string.\n   *\n   * @example\n   * const root = postcss.parse('a, b { }')\n   * const rule = root.first\n   * rule.selector //=> 'a, b'\n   */\n\n  /**\n   * @memberof Rule#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node. It also stores `*`\n   *   and `_` symbols before the declaration (IE hack).\n   * * `after`: the space symbols after the last child of the node\n   *   to the end of the node.\n   * * `between`: the symbols between the property and value\n   *   for declarations, selector and `{` for rules, or last parameter\n   *   and `{` for at-rules.\n   * * `semicolon`: contains `true` if the last child has\n   *   an (optional) semicolon.\n   * * `ownSemicolon`: contains `true` if there is semicolon after rule.\n   *\n   * PostCSS cleans selectors from comments and extra spaces,\n   * but it stores origin content in raws properties.\n   * As such, if you don’t change a declaration’s value,\n   * PostCSS will use the raw value with comments.\n   *\n   * @example\n   * const root = postcss.parse('a {\\n  color:black\\n}')\n   * root.first.first.raws //=> { before: '', between: ' ', after: '\\n' }\n   */\n}\n\nexport default Rule\n", "import Declaration from './declaration'\nimport Comment from './comment'\nimport Node from './node'\n\nfunction cleanSource (nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\n/**\n * The {@link Root}, {@link AtRule}, and {@link Rule} container nodes\n * inherit some common methods to help work with their children.\n *\n * Note that all containers can store any content. If you write a rule inside\n * a rule, PostCSS will parse it.\n *\n * @extends Node\n * @abstract\n */\nclass Container extends Node {\n  push (child) {\n    child.parent = this\n    this.nodes.push(child)\n    return this\n  }\n\n  /**\n   * Iterates through the container’s immediate children,\n   * calling `callback` for each child.\n   *\n   * Returning `false` in the callback will break iteration.\n   *\n   * This method only iterates through the container’s immediate children.\n   * If you need to recursively iterate through all the container’s descendant\n   * nodes, use {@link Container#walk}.\n   *\n   * Unlike the for `{}`-cycle or `Array#forEach` this iterator is safe\n   * if you are mutating the array of child nodes during iteration.\n   * PostCSS will adjust the current index to match the mutations.\n   *\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black; z-index: 1 }')\n   * const rule = root.first\n   *\n   * for (const decl of rule.nodes) {\n   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })\n   *   // Cycle will be infinite, because cloneBefore moves the current node\n   *   // to the next index\n   * }\n   *\n   * rule.each(decl => {\n   *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })\n   *   // Will be executed only for color and z-index\n   * })\n   */\n  each (callback) {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = { }\n\n    this.lastEach += 1\n    let id = this.lastEach\n    this.indexes[id] = 0\n\n    if (!this.nodes) return undefined\n\n    let index, result\n    while (this.indexes[id] < this.nodes.length) {\n      index = this.indexes[id]\n      result = callback(this.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[id] += 1\n    }\n\n    delete this.indexes[id]\n\n    return result\n  }\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each node.\n   *\n   * Like container.each(), this method is safe to use\n   * if you are mutating arrays during iteration.\n   *\n   * If you only need to iterate through the container’s immediate children,\n   * use {@link Container#each}.\n   *\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walk(node => {\n   *   // Traverses all descendant nodes.\n   * })\n   */\n  walk (callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        e.postcssNode = child\n        if (e.stack && child.source && /\\n\\s{4}at /.test(e.stack)) {\n          let s = child.source\n          e.stack = e.stack.replace(/\\n\\s{4}at /,\n            `$&${ s.input.from }:${ s.start.line }:${ s.start.column }$&`)\n        }\n        throw e\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n      return result\n    })\n  }\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each declaration node.\n   *\n   * If you pass a filter, iteration will only happen over declarations\n   * with matching properties.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {string|RegExp} [prop]   String or regular expression\n   *                                 to filter declarations by property name.\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walkDecls(decl => {\n   *   checkPropertySupport(decl.prop)\n   * })\n   *\n   * root.walkDecls('border-radius', decl => {\n   *   decl.remove()\n   * })\n   *\n   * root.walkDecls(/^background/, decl => {\n   *   decl.value = takeFirstColorFromGradient(decl.value)\n   * })\n   */\n  walkDecls (prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each rule node.\n   *\n   * If you pass a filter, iteration will only happen over rules\n   * with matching selectors.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {string|RegExp} [selector] String or regular expression\n   *                                   to filter rules by selector.\n   * @param {childIterator} callback   Iterator receives each node and index.\n   *\n   * @return {false|undefined} returns `false` if iteration was broke.\n   *\n   * @example\n   * const selectors = []\n   * root.walkRules(rule => {\n   *   selectors.push(rule.selector)\n   * })\n   * console.log(`Your CSS uses ${ selectors.length } selectors`)\n   */\n  walkRules (selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each at-rule node.\n   *\n   * If you pass a filter, iteration will only happen over at-rules\n   * that have matching names.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {string|RegExp} [name]   String or regular expression\n   *                                 to filter at-rules by name.\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walkAtRules(rule => {\n   *   if (isOld(rule.name)) rule.remove()\n   * })\n   *\n   * let first = false\n   * root.walkAtRules('charset', rule => {\n   *   if (!first) {\n   *     first = true\n   *   } else {\n   *     rule.remove()\n   *   }\n   * })\n   */\n  walkAtRules (name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  /**\n   * Traverses the container’s descendant nodes, calling callback\n   * for each comment node.\n   *\n   * Like {@link Container#each}, this method is safe\n   * to use if you are mutating arrays during iteration.\n   *\n   * @param {childIterator} callback Iterator receives each node and index.\n   *\n   * @return {false|undefined} Returns `false` if iteration was broke.\n   *\n   * @example\n   * root.walkComments(comment => {\n   *   comment.remove()\n   * })\n   */\n  walkComments (callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  /**\n   * Inserts new nodes to the end of the container.\n   *\n   * @param {...(Node|object|string|Node[])} children New nodes.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * const decl1 = postcss.decl({ prop: 'color', value: 'black' })\n   * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })\n   * rule.append(decl1, decl2)\n   *\n   * root.append({ name: 'charset', params: '\"UTF-8\"' })  // at-rule\n   * root.append({ selector: 'a' })                       // rule\n   * rule.append({ prop: 'color', value: 'black' })       // declaration\n   * rule.append({ text: 'Comment' })                     // comment\n   *\n   * root.append('a {}')\n   * root.first.append('color: black; z-index: 1')\n   */\n  append (...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.nodes.push(node)\n    }\n    return this\n  }\n\n  /**\n   * Inserts new nodes to the start of the container.\n   *\n   * @param {...(Node|object|string|Node[])} children New nodes.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * const decl1 = postcss.decl({ prop: 'color', value: 'black' })\n   * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })\n   * rule.prepend(decl1, decl2)\n   *\n   * root.append({ name: 'charset', params: '\"UTF-8\"' })  // at-rule\n   * root.append({ selector: 'a' })                       // rule\n   * rule.append({ prop: 'color', value: 'black' })       // declaration\n   * rule.append({ text: 'Comment' })                     // comment\n   *\n   * root.append('a {}')\n   * root.first.append('color: black; z-index: 1')\n   */\n  prepend (...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n    return this\n  }\n\n  cleanRaws (keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  /**\n   * Insert new node before old node within the container.\n   *\n   * @param {Node|number} exist             Child or child’s index.\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * rule.insertBefore(decl, decl.clone({ prop: '-webkit-' + decl.prop }))\n   */\n  insertBefore (exist, add) {\n    exist = this.index(exist)\n\n    let type = exist === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.nodes[exist], type).reverse()\n    for (let node of nodes) this.nodes.splice(exist, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Insert new node after old node within the container.\n   *\n   * @param {Node|number} exist             Child or child’s index.\n   * @param {Node|object|string|Node[]} add New node.\n   *\n   * @return {Node} This node for methods chain.\n   */\n  insertAfter (exist, add) {\n    exist = this.index(exist)\n\n    let nodes = this.normalize(add, this.nodes[exist]).reverse()\n    for (let node of nodes) this.nodes.splice(exist + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Removes node from the container and cleans the parent properties\n   * from the node and its children.\n   *\n   * @param {Node|number} child Child or child’s index.\n   *\n   * @return {Node} This node for methods chain\n   *\n   * @example\n   * rule.nodes.length  //=> 5\n   * rule.removeChild(decl)\n   * rule.nodes.length  //=> 4\n   * decl.parent        //=> undefined\n   */\n  removeChild (child) {\n    child = this.index(child)\n    this.nodes[child].parent = undefined\n    this.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Removes all children from the container\n   * and cleans their parent properties.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * rule.removeAll()\n   * rule.nodes.length //=> 0\n   */\n  removeAll () {\n    for (let node of this.nodes) node.parent = undefined\n    this.nodes = []\n    return this\n  }\n\n  /**\n   * Passes all declaration values within the container that match pattern\n   * through callback, replacing those values with the returned result\n   * of callback.\n   *\n   * This method is useful if you are using a custom unit or function\n   * and need to iterate through all values.\n   *\n   * @param {string|RegExp} pattern      Replace pattern.\n   * @param {object} opts                Options to speed up the search.\n   * @param {string|string[]} opts.props An array of property names.\n   * @param {string} opts.fast           String that’s used to narrow down\n   *                                     values and speed up the regexp search.\n   * @param {function|string} callback   String to replace pattern or callback\n   *                                     that returns a new value. The callback\n   *                                     will receive the same arguments\n   *                                     as those passed to a function parameter\n   *                                     of `String#replace`.\n   *\n   * @return {Node} This node for methods chain.\n   *\n   * @example\n   * root.replaceValues(/\\d+rem/, { fast: 'rem' }, string => {\n   *   return 15 * parseInt(string) + 'px'\n   * })\n   */\n  replaceValues (pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = { }\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && opts.props.indexOf(decl.prop) === -1) return\n      if (opts.fast && decl.value.indexOf(opts.fast) === -1) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    return this\n  }\n\n  /**\n   * Returns `true` if callback returns `true`\n   * for all of the container’s children.\n   *\n   * @param {childCondition} condition Iterator returns true or false.\n   *\n   * @return {boolean} Is every child pass condition.\n   *\n   * @example\n   * const noPrefixes = rule.every(i => i.prop[0] !== '-')\n   */\n  every (condition) {\n    return this.nodes.every(condition)\n  }\n\n  /**\n   * Returns `true` if callback returns `true` for (at least) one\n   * of the container’s children.\n   *\n   * @param {childCondition} condition Iterator returns true or false.\n   *\n   * @return {boolean} Is some child pass condition.\n   *\n   * @example\n   * const hasPrefix = rule.some(i => i.prop[0] === '-')\n   */\n  some (condition) {\n    return this.nodes.some(condition)\n  }\n\n  /**\n   * Returns a `child`’s index within the {@link Container#nodes} array.\n   *\n   * @param {Node} child Child of the current container.\n   *\n   * @return {number} Child index.\n   *\n   * @example\n   * rule.index( rule.nodes[2] ) //=> 2\n   */\n  index (child) {\n    if (typeof child === 'number') {\n      return child\n    }\n    return this.nodes.indexOf(child)\n  }\n\n  /**\n   * The container’s first child.\n   *\n   * @type {Node}\n   *\n   * @example\n   * rule.first === rules.nodes[0]\n   */\n  get first () {\n    if (!this.nodes) return undefined\n    return this.nodes[0]\n  }\n\n  /**\n   * The container’s last child.\n   *\n   * @type {Node}\n   *\n   * @example\n   * rule.last === rule.nodes[rule.nodes.length - 1]\n   */\n  get last () {\n    if (!this.nodes) return undefined\n    return this.nodes[this.nodes.length - 1]\n  }\n\n  normalize (nodes, sample) {\n    if (typeof nodes === 'string') {\n      let parse = require('./parse')\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      let Rule = require('./rule')\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      let AtRule = require('./at-rule')\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      if (i.parent) i.parent.removeChild(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/[^\\s]/g, '')\n        }\n      }\n      i.parent = this\n      return i\n    })\n\n    return processed\n  }\n\n  /**\n   * @memberof Container#\n   * @member {Node[]} nodes An array containing the container’s children.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black }')\n   * root.nodes.length           //=> 1\n   * root.nodes[0].selector      //=> 'a'\n   * root.nodes[0].nodes[0].prop //=> 'color'\n   */\n}\n\nexport default Container\n\n/**\n * @callback childCondition\n * @param {Node} node    Container child.\n * @param {number} index Child index.\n * @param {Node[]} nodes All container children.\n * @return {boolean}\n */\n\n/**\n * @callback childIterator\n * @param {Node} node    Container child.\n * @param {number} index Child index.\n * @return {false|undefined} Returning `false` will break iteration.\n */\n", "import Container from './container'\n\n/**\n * Represents an at-rule.\n *\n * If it’s followed in the CSS by a {} block, this node will have\n * a nodes property representing its children.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('@charset \"UTF-8\"; @media print {}')\n *\n * const charset = root.first\n * charset.type  //=> 'atrule'\n * charset.nodes //=> undefined\n *\n * const media = root.last\n * media.nodes   //=> []\n */\nclass AtRule extends Container {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append (...children) {\n    if (!this.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend (...children) {\n    if (!this.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n\n  /**\n   * @memberof AtRule#\n   * @member {string} name The at-rule’s name immediately follows the `@`.\n   *\n   * @example\n   * const root  = postcss.parse('@media print {}')\n   * media.name //=> 'media'\n   * const media = root.first\n   */\n\n  /**\n   * @memberof AtRule#\n   * @member {string} params The at-rule’s parameters, the values\n   *                         that follow the at-rule’s name but precede\n   *                         any {} block.\n   *\n   * @example\n   * const root  = postcss.parse('@media print, screen {}')\n   * const media = root.first\n   * media.params //=> 'print, screen'\n   */\n\n  /**\n   * @memberof AtRule#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                        node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node. It also stores `*`\n   *   and `_` symbols before the declaration (IE hack).\n   * * `after`: the space symbols after the last child of the node\n   *   to the end of the node.\n   * * `between`: the symbols between the property and value\n   *   for declarations, selector and `{` for rules, or last parameter\n   *   and `{` for at-rules.\n   * * `semicolon`: contains true if the last child has\n   *   an (optional) semicolon.\n   * * `afterName`: the space between the at-rule name and its parameters.\n   *\n   * PostCSS cleans at-rule parameters from comments and extra spaces,\n   * but it stores origin content in raws properties.\n   * As such, if you don’t change a declaration’s value,\n   * PostCSS will use the raw value with comments.\n   *\n   * @example\n   * const root = postcss.parse('  @media\\nprint {\\n}')\n   * root.first.first.raws //=> { before: '  ',\n   *                       //     between: ' ',\n   *                       //     afterName: '\\n',\n   *                       //     after: '\\n' }\n   */\n}\n\nexport default AtRule\n", "import Container from './container'\n\n/**\n * Represents a CSS file and contains all its parsed nodes.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{color:black} b{z-index:2}')\n * root.type         //=> 'root'\n * root.nodes.length //=> 2\n */\nclass Root extends Container {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild (child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize (child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  /**\n   * Returns a {@link Result} instance representing the root’s CSS.\n   *\n   * @param {processOptions} [opts] Options with only `to` and `map` keys.\n   *\n   * @return {Result} Result with current root’s CSS.\n   *\n   * @example\n   * const root1 = postcss.parse(css1, { from: 'a.css' })\n   * const root2 = postcss.parse(css2, { from: 'b.css' })\n   * root1.append(root2)\n   * const result = root1.toResult({ to: 'all.css', map: true })\n   */\n  toResult (opts = { }) {\n    let LazyResult = require('./lazy-result')\n    let Processor = require('./processor')\n\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n\n  /**\n   * @memberof Root#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `after`: the space symbols after the last child to the end of file.\n   * * `semicolon`: is the last child has an (optional) semicolon.\n   *\n   * @example\n   * postcss.parse('a {}\\n').raws //=> { after: '\\n' }\n   * postcss.parse('a {}').raws   //=> { after: '' }\n   */\n}\n\nexport default Root\n", "import Declaration from './declaration'\nimport tokenizer from './tokenize'\nimport Comment from './comment'\nimport AtRule from './at-rule'\nimport Root from './root'\nimport Rule from './rule'\n\nexport default class Parser {\n  constructor (input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { line: 1, column: 1 } }\n  }\n\n  createTokenizer () {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse () {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment (token) {\n    let node = new Comment()\n    this.init(node, token[2], token[3])\n    node.source.end = { line: token[4], column: token[5] }\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*[^\\s])(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule (token) {\n    let node = new Rule()\n    this.init(node, token[2], token[3])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other (start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      while (tokens.length) {\n        token = tokens[tokens.length - 1][0]\n        if (token !== 'space' && token !== 'comment') break\n        this.tokenizer.back(tokens.pop())\n      }\n      this.decl(tokens)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule (tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2], tokens[0][3])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl (tokens) {\n    let node = new Declaration()\n    this.init(node)\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n    if (last[4]) {\n      node.source.end = { line: last[4], column: last[5] }\n    } else {\n      node.source.end = { line: last[2], column: last[3] }\n    }\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = { line: tokens[0][2], column: tokens[0][3] }\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n    node.raws.between += this.spacesAndCommentsFromStart(tokens)\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i > 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    this.raw(node, 'value', tokens)\n\n    if (node.value.indexOf(':') !== -1) this.checkMissedSemicolon(tokens)\n  }\n\n  atrule (token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2], token[3])\n\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      if (token[0] === ';') {\n        node.source.end = { line: token[2], column: token[3] }\n        this.semicolon = true\n        break\n      } else if (token[0] === '{') {\n        open = true\n        break\n      } else if (token[0] === '}') {\n        if (params.length > 0) {\n          shift = params.length - 1\n          prev = params[shift]\n          while (prev && prev[0] === 'space') {\n            prev = params[--shift]\n          }\n          if (prev) {\n            node.source.end = { line: prev[4], column: prev[5] }\n          }\n        }\n        this.end(token)\n        break\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = { line: token[4], column: token[5] }\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end (token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = { line: token[2], column: token[3] }\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile () {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon (token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  init (node, line, column) {\n    this.current.push(node)\n\n    node.source = { start: { line, column }, input: this.input }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw (node, prop, tokens) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n    let pattern = /^([.|#])?([\\w])+/i\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n\n      if (type === 'comment' && node.type === 'rule') {\n        prev = tokens[i - 1]\n        next = tokens[i + 1]\n\n        if (\n          prev[0] !== 'space' &&\n          next[0] !== 'space' &&\n          pattern.test(prev[1]) &&\n          pattern.test(next[1])\n        ) {\n          value += token[1]\n        } else {\n          clean = false\n        }\n\n        continue\n      }\n\n      if (type === 'comment' || (type === 'space' && i === length - 1)) {\n        clean = false\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd (tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart (tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd (tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom (tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon (tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let i = 0; i < tokens.length; i++) {\n      token = tokens[i]\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket (bracket) {\n    throw this.input.error('Unclosed bracket', bracket[2], bracket[3])\n  }\n\n  unknownWord (tokens) {\n    throw this.input.error('Unknown word', tokens[0][2], tokens[0][3])\n  }\n\n  unexpectedClose (token) {\n    throw this.input.error('Unexpected }', token[2], token[3])\n  }\n\n  unclosedBlock () {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon (token) {\n    throw this.input.error('Double colon', token[2], token[3])\n  }\n\n  unnamedAtrule (node, token) {\n    throw this.input.error('At-rule without name', token[2], token[3])\n  }\n\n  precheckMissedSemicolon (/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon (tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    throw this.input.error('Missed semicolon', token[2], token[3])\n  }\n}\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "import mozilla from 'source-map'\nimport path from 'path'\nimport fs from 'fs'\n\nfunction fromBase64 (str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    return window.atob(str)\n  }\n}\n\n/**\n * Source map information from input CSS.\n * For example, source map after Sass compiler.\n *\n * This class will automatically find source map in input CSS or in file system\n * near input file (according `from` option).\n *\n * @example\n * const root = postcss.parse(css, { from: 'a.sass.css' })\n * root.input.map //=> PreviousMap\n */\nclass PreviousMap {\n  /**\n   * @param {string}         css    Input CSS source.\n   * @param {processOptions} [opts] {@link Processor#process} options.\n   */\n  constructor (css, opts) {\n    this.loadAnnotation(css)\n    /**\n     * Was source map inlined by data-uri to input CSS.\n     *\n     * @type {boolean}\n     */\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (text) this.text = text\n  }\n\n  /**\n   * Create a instance of `SourceMapGenerator` class\n   * from the `source-map` library to work with source map information.\n   *\n   * It is lazy method, so it will create object only on first call\n   * and then it will use cache.\n   *\n   * @return {SourceMapGenerator} Object with source map information.\n   */\n  consumer () {\n    if (!this.consumerCache) {\n      this.consumerCache = new mozilla.SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  /**\n   * Does source map contains `sourcesContent` with input source text.\n   *\n   * @return {boolean} Is `sourcesContent` present.\n   */\n  withContent () {\n    return !!(this.consumer().sourcesContent &&\n              this.consumer().sourcesContent.length > 0)\n  }\n\n  startWith (string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL (sourceMapString) {\n    return sourceMapString\n      .match(/\\/\\*\\s*# sourceMappingURL=((?:(?!sourceMappingURL=).)*)\\*\\//)[1]\n      .trim()\n  }\n\n  loadAnnotation (css) {\n    let annotations = css.match(\n      /\\/\\*\\s*# sourceMappingURL=(?:(?!sourceMappingURL=).)*\\*\\//gm\n    )\n\n    if (annotations && annotations.length > 0) {\n      // Locate the last sourceMappingURL to avoid picking up\n      // sourceMappingURLs from comments, strings, etc.\n      let lastAnnotation = annotations[annotations.length - 1]\n      if (lastAnnotation) {\n        this.annotation = this.getAnnotationURL(lastAnnotation)\n      }\n    }\n  }\n\n  decodeInline (text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let uri = 'data:application/json,'\n\n    if (this.startWith(text, uri)) {\n      return decodeURIComponent(text.substr(uri.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadMap (file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath && fs.existsSync && fs.existsSync(prevPath)) {\n          return fs.readFileSync(prevPath, 'utf-8').toString().trim()\n        } else {\n          throw new Error(\n            'Unable to load previous source map: ' + prevPath.toString())\n        }\n      } else if (prev instanceof mozilla.SourceMapConsumer) {\n        return mozilla.SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof mozilla.SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString())\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = path.join(path.dirname(file), map)\n\n      this.root = path.dirname(map)\n      if (fs.existsSync && fs.existsSync(map)) {\n        return fs.readFileSync(map, 'utf-8').toString().trim()\n      } else {\n        return false\n      }\n    }\n  }\n\n  isMap (map) {\n    if (typeof map !== 'object') return false\n    return typeof map.mappings === 'string' || typeof map._mappings === 'string'\n  }\n}\n\nexport default PreviousMap\n", "import path from 'path'\n\nimport CssSyntaxError from './css-syntax-error'\nimport PreviousMap from './previous-map'\n\nlet sequence = 0\n\n/**\n * Represents the source CSS.\n *\n * @example\n * const root  = postcss.parse(css, { from: file })\n * const input = root.source.input\n */\nclass Input {\n  /**\n   * @param {string} css    Input CSS source.\n   * @param {object} [opts] {@link Processor#process} options.\n   */\n  constructor (css, opts = { }) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${ css } instead of CSS string`)\n    }\n\n    /**\n     * Input CSS source\n     *\n     * @type {string}\n     *\n     * @example\n     * const input = postcss.parse('a{}', { from: file }).input\n     * input.css //=> \"a{}\"\n     */\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (opts.from) {\n      if (/^\\w+:\\/\\//.test(opts.from) || path.isAbsolute(opts.from)) {\n        /**\n         * The absolute path to the CSS source file defined\n         * with the `from` option.\n         *\n         * @type {string}\n         *\n         * @example\n         * const root = postcss.parse(css, { from: 'a.css' })\n         * root.source.input.file //=> '/home/ai/a.css'\n         */\n        this.file = opts.from\n      } else {\n        this.file = path.resolve(opts.from)\n      }\n    }\n\n    let map = new PreviousMap(this.css, opts)\n    if (map.text) {\n      /**\n       * The input source map passed from a compilation step before PostCSS\n       * (for example, from Sass compiler).\n       *\n       * @type {PreviousMap}\n       *\n       * @example\n       * root.source.input.map.consumer().sources //=> ['a.sass']\n       */\n      this.map = map\n      let file = map.consumer().file\n      if (!this.file && file) this.file = this.mapResolve(file)\n    }\n\n    if (!this.file) {\n      sequence += 1\n      /**\n       * The unique ID of the CSS source. It will be created if `from` option\n       * is not provided (because PostCSS does not know the file path).\n       *\n       * @type {string}\n       *\n       * @example\n       * const root = postcss.parse(css)\n       * root.source.input.file //=> undefined\n       * root.source.input.id   //=> \"<input css 1>\"\n       */\n      this.id = '<input css ' + sequence + '>'\n    }\n    if (this.map) this.map.file = this.from\n  }\n\n  error (message, line, column, opts = { }) {\n    let result\n    let origin = this.origin(line, column)\n    if (origin) {\n      result = new CssSyntaxError(\n        message, origin.line, origin.column,\n        origin.source, origin.file, opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message, line, column, this.css, this.file, opts.plugin)\n    }\n\n    result.input = { line, column, source: this.css }\n    if (this.file) result.input.file = this.file\n\n    return result\n  }\n\n  /**\n   * Reads the input source map and returns a symbol position\n   * in the input source (e.g., in a Sass file that was compiled\n   * to CSS before being passed to PostCSS).\n   *\n   * @param {number} line   Line in input CSS.\n   * @param {number} column Column in input CSS.\n   *\n   * @return {filePosition} Position in input source.\n   *\n   * @example\n   * root.source.input.origin(1, 1) //=> { file: 'a.css', line: 3, column: 1 }\n   */\n  origin (line, column) {\n    if (!this.map) return false\n    let consumer = this.map.consumer()\n\n    let from = consumer.originalPositionFor({ line, column })\n    if (!from.source) return false\n\n    let result = {\n      file: this.mapResolve(from.source),\n      line: from.line,\n      column: from.column\n    }\n\n    let source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  mapResolve (file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file\n    }\n    return path.resolve(this.map.consumer().sourceRoot || '.', file)\n  }\n\n  /**\n   * The CSS source identifier. Contains {@link Input#file} if the user\n   * set the `from` option, or {@link Input#id} if they did not.\n   *\n   * @type {string}\n   *\n   * @example\n   * const root = postcss.parse(css, { from: 'a.css' })\n   * root.source.input.from //=> \"/home/ai/a.css\"\n   *\n   * const root = postcss.parse(css)\n   * root.source.input.from //=> \"<input css 1>\"\n   */\n  get from () {\n    return this.file || this.id\n  }\n}\n\nexport default Input\n\n/**\n * @typedef  {object} filePosition\n * @property {string} file   Path to file.\n * @property {number} line   Source line in file.\n * @property {number} column Source column in file.\n */\n", "import Parser from './parser'\nimport Input from './input'\n\nfunction parse (css, opts) {\n  let input = new Input(css, opts)\n  let parser = new Parser(input)\n  try {\n    parser.parse()\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (e.name === 'CssSyntaxError' && opts && opts.from) {\n        if (/\\.scss$/i.test(opts.from)) {\n          e.message += '\\nYou tried to parse SCSS with ' +\n                       'the standard CSS parser; ' +\n                       'try again with the postcss-scss parser'\n        } else if (/\\.sass/i.test(opts.from)) {\n          e.message += '\\nYou tried to parse Sass with ' +\n                       'the standard CSS parser; ' +\n                       'try again with the postcss-sass parser'\n        } else if (/\\.less$/i.test(opts.from)) {\n          e.message += '\\nYou tried to parse Less with ' +\n                       'the standard CSS parser; ' +\n                       'try again with the postcss-less parser'\n        }\n      }\n    }\n    throw e\n  }\n\n  return parser.root\n}\n\nexport default parse\n", "import MapGenerator from './map-generator'\nimport stringify from './stringify'\nimport warnOnce from './warn-once'\nimport Result from './result'\nimport parse from './parse'\n\nfunction isPromise (obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\n/**\n * A Promise proxy for the result of PostCSS transformations.\n *\n * A `LazyResult` instance is returned by {@link Processor#process}.\n *\n * @example\n * const lazy = postcss([autoprefixer]).process(css)\n */\nclass LazyResult {\n  constructor (processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (typeof css === 'object' && css !== null && css.type === 'root') {\n      root = css\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = css.root\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = { }\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.error = error\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n  }\n\n  /**\n   * Returns a {@link Processor} instance, which will be used\n   * for CSS transformations.\n   *\n   * @type {Processor}\n   */\n  get processor () {\n    return this.result.processor\n  }\n\n  /**\n   * Options from the {@link Processor#process} call.\n   *\n   * @type {processOptions}\n   */\n  get opts () {\n    return this.result.opts\n  }\n\n  /**\n   * Processes input CSS through synchronous plugins, converts `Root`\n   * to a CSS string and returns {@link Result#css}.\n   *\n   * This property will only work with synchronous plugins.\n   * If the processor contains any asynchronous plugins\n   * it will throw an error. This is why this method is only\n   * for debug purpose, you should always use {@link LazyResult#then}.\n   *\n   * @type {string}\n   * @see Result#css\n   */\n  get css () {\n    return this.stringify().css\n  }\n\n  /**\n   * An alias for the `css` property. Use it with syntaxes\n   * that generate non-CSS output.\n   *\n   * This property will only work with synchronous plugins.\n   * If the processor contains any asynchronous plugins\n   * it will throw an error. This is why this method is only\n   * for debug purpose, you should always use {@link LazyResult#then}.\n   *\n   * @type {string}\n   * @see Result#content\n   */\n  get content () {\n    return this.stringify().content\n  }\n\n  /**\n   * Processes input CSS through synchronous plugins\n   * and returns {@link Result#map}.\n   *\n   * This property will only work with synchronous plugins.\n   * If the processor contains any asynchronous plugins\n   * it will throw an error. This is why this method is only\n   * for debug purpose, you should always use {@link LazyResult#then}.\n   *\n   * @type {SourceMapGenerator}\n   * @see Result#map\n   */\n  get map () {\n    return this.stringify().map\n  }\n\n  /**\n   * Processes input CSS through synchronous plugins\n   * and returns {@link Result#root}.\n   *\n   * This property will only work with synchronous plugins. If the processor\n   * contains any asynchronous plugins it will throw an error.\n   *\n   * This is why this method is only for debug purpose,\n   * you should always use {@link LazyResult#then}.\n   *\n   * @type {Root}\n   * @see Result#root\n   */\n  get root () {\n    return this.sync().root\n  }\n\n  /**\n   * Processes input CSS through synchronous plugins\n   * and returns {@link Result#messages}.\n   *\n   * This property will only work with synchronous plugins. If the processor\n   * contains any asynchronous plugins it will throw an error.\n   *\n   * This is why this method is only for debug purpose,\n   * you should always use {@link LazyResult#then}.\n   *\n   * @type {Message[]}\n   * @see Result#messages\n   */\n  get messages () {\n    return this.sync().messages\n  }\n\n  /**\n   * Processes input CSS through synchronous plugins\n   * and calls {@link Result#warnings()}.\n   *\n   * @return {Warning[]} Warnings from plugins.\n   */\n  warnings () {\n    return this.sync().warnings()\n  }\n\n  /**\n   * Alias for the {@link LazyResult#css} property.\n   *\n   * @example\n   * lazy + '' === lazy.css\n   *\n   * @return {string} Output CSS.\n   */\n  toString () {\n    return this.css\n  }\n\n  /**\n   * Processes input CSS through synchronous and asynchronous plugins\n   * and calls `onFulfilled` with a Result instance. If a plugin throws\n   * an error, the `onRejected` callback will be executed.\n   *\n   * It implements standard Promise API.\n   *\n   * @param {onFulfilled} onFulfilled Callback will be executed\n   *                                  when all plugins will finish work.\n   * @param {onRejected}  onRejected  Callback will be executed on any error.\n   *\n   * @return {Promise} Promise API to make queue.\n   *\n   * @example\n   * postcss([autoprefixer]).process(css, { from: cssPath }).then(result => {\n   *   console.log(result.css)\n   * })\n   */\n  then (onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this.opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n          'and will not find Browserslist config. Set it to CSS file path ' +\n          'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  /**\n   * Processes input CSS through synchronous and asynchronous plugins\n   * and calls onRejected for each error thrown in any plugin.\n   *\n   * It implements standard Promise API.\n   *\n   * @param {onRejected} onRejected Callback will be executed on any error.\n   *\n   * @return {Promise} Promise API to make queue.\n   *\n   * @example\n   * postcss([autoprefixer]).process(css).then(result => {\n   *   console.log(result.css)\n   * }).catch(error => {\n   *   console.error(error)\n   * })\n   */\n  catch (onRejected) {\n    return this.async().catch(onRejected)\n  }\n  /**\n   * Processes input CSS through synchronous and asynchronous plugins\n   * and calls onFinally on any error or when all plugins will finish work.\n   *\n   * It implements standard Promise API.\n   *\n   * @param {onFinally} onFinally Callback will be executed on any error or\n   *                              when all plugins will finish work.\n   *\n   * @return {Promise} Promise API to make queue.\n   *\n   * @example\n   * postcss([autoprefixer]).process(css).finally(() => {\n   *   console.log('processing ended')\n   * })\n   */\n  finally (onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  handleError (error, plugin) {\n    try {\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (process.env.NODE_ENV !== 'production') {\n          let pluginName = plugin.postcssPlugin\n          let pluginVer = plugin.postcssVersion\n          let runtimeVer = this.result.processor.version\n          let a = pluginVer.split('.')\n          let b = runtimeVer.split('.')\n\n          if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n            console.error(\n              'Unknown error from PostCSS plugin. Your current PostCSS ' +\n              'version is ' + runtimeVer + ', but ' + pluginName + ' uses ' +\n              pluginVer + '. Perhaps this is the source of the error below.'\n            )\n          }\n        }\n      }\n    } catch (err) {\n      if (console && console.error) console.error(err)\n    }\n  }\n\n  asyncTick (resolve, reject) {\n    if (this.plugin >= this.processor.plugins.length) {\n      this.processed = true\n      return resolve()\n    }\n\n    try {\n      let plugin = this.processor.plugins[this.plugin]\n      let promise = this.run(plugin)\n      this.plugin += 1\n\n      if (isPromise(promise)) {\n        promise.then(() => {\n          this.asyncTick(resolve, reject)\n        }).catch(error => {\n          this.handleError(error, plugin)\n          this.processed = true\n          reject(error)\n        })\n      } else {\n        this.asyncTick(resolve, reject)\n      }\n    } catch (error) {\n      this.processed = true\n      reject(error)\n    }\n  }\n\n  async () {\n    if (this.processed) {\n      return new Promise((resolve, reject) => {\n        if (this.error) {\n          reject(this.error)\n        } else {\n          resolve(this.stringify())\n        }\n      })\n    }\n    if (this.processing) {\n      return this.processing\n    }\n\n    this.processing = new Promise((resolve, reject) => {\n      if (this.error) return reject(this.error)\n      this.plugin = 0\n      this.asyncTick(resolve, reject)\n    }).then(() => {\n      this.processed = true\n      return this.stringify()\n    })\n\n    return this.processing\n  }\n\n  sync () {\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw new Error(\n        'Use process(css).then(cb) to work with async plugins')\n    }\n\n    if (this.error) throw this.error\n\n    for (let plugin of this.result.processor.plugins) {\n      let promise = this.run(plugin)\n      if (isPromise(promise)) {\n        throw new Error(\n          'Use process(css).then(cb) to work with async plugins')\n      }\n    }\n\n    return this.result\n  }\n\n  run (plugin) {\n    this.result.lastPlugin = plugin\n\n    try {\n      return plugin(this.result.root, this.result)\n    } catch (error) {\n      this.handleError(error, plugin)\n      throw error\n    }\n  }\n\n  stringify () {\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    let opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    let map = new MapGenerator(str, this.result.root, this.result.opts)\n    let data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n}\n\nexport default LazyResult\n\n/**\n * @callback onFulfilled\n * @param {Result} result\n */\n\n/**\n * @callback onRejected\n * @param {Error} error\n */\n", "import LazyResult from './lazy-result'\n\n/**\n * Contains plugins to process CSS. Create one `Processor` instance,\n * initialize its plugins, and then use that instance on numerous CSS files.\n *\n * @example\n * const processor = postcss([autoprefixer, precss])\n * processor.process(css1).then(result => console.log(result.css))\n * processor.process(css2).then(result => console.log(result.css))\n */\nclass Processor {\n  /**\n   * @param {Array.<Plugin|pluginFunction>|Processor} plugins PostCSS plugins.\n   *        See {@link Processor#use} for plugin format.\n   */\n  constructor (plugins = []) {\n    /**\n     * Current PostCSS version.\n     *\n     * @type {string}\n     *\n     * @example\n     * if (result.processor.version.split('.')[0] !== '6') {\n     *   throw new Error('This plugin works only with PostCSS 6')\n     * }\n     */\n    this.version = '7.0.39'\n    /**\n     * Plugins added to this processor.\n     *\n     * @type {pluginFunction[]}\n     *\n     * @example\n     * const processor = postcss([autoprefixer, precss])\n     * processor.plugins.length //=> 2\n     */\n    this.plugins = this.normalize(plugins)\n  }\n\n  /**\n   * Adds a plugin to be used as a CSS processor.\n   *\n   * PostCSS plugin can be in 4 formats:\n   * * A plugin created by {@link postcss.plugin} method.\n   * * A function. PostCSS will pass the function a @{link Root}\n   *   as the first argument and current {@link Result} instance\n   *   as the second.\n   * * An object with a `postcss` method. PostCSS will use that method\n   *   as described in #2.\n   * * Another {@link Processor} instance. PostCSS will copy plugins\n   *   from that instance into this one.\n   *\n   * Plugins can also be added by passing them as arguments when creating\n   * a `postcss` instance (see [`postcss(plugins)`]).\n   *\n   * Asynchronous plugins should return a `Promise` instance.\n   *\n   * @param {Plugin|pluginFunction|Processor} plugin PostCSS plugin\n   *                                                 or {@link Processor}\n   *                                                 with plugins.\n   *\n   * @example\n   * const processor = postcss()\n   *   .use(autoprefixer)\n   *   .use(precss)\n   *\n   * @return {Processes} Current processor to make methods chain.\n   */\n  use (plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n\n  /**\n   * Parses source CSS and returns a {@link LazyResult} Promise proxy.\n   * Because some plugins can be asynchronous it doesn’t make\n   * any transformations. Transformations will be applied\n   * in the {@link LazyResult} methods.\n   *\n   * @param {string|toString|Result} css String with input CSS or any object\n   *                                     with a `toString()` method,\n   *                                     like a Buffer. Optionally, send\n   *                                     a {@link Result} instance\n   *                                     and the processor will take\n   *                                     the {@link Root} from it.\n   * @param {processOptions} [opts]      Options.\n   *\n   * @return {LazyResult} Promise proxy.\n   *\n   * @example\n   * processor.process(css, { from: 'a.css', to: 'a.out.css' })\n   *   .then(result => {\n   *      console.log(result.css)\n   *   })\n   */\n  process (css, opts = { }) {\n    if (this.plugins.length === 0 && opts.parser === opts.stringifier) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof console !== 'undefined' && console.warn) {\n          console.warn(\n            'You did not set any plugins, parser, or stringifier. ' +\n            'Right now, PostCSS does nothing. Pick plugins for your case ' +\n            'on https://www.postcss.parts/ and use them in postcss.config.js.'\n          )\n        }\n      }\n    }\n    return new LazyResult(this, css, opts)\n  }\n\n  normalize (plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        let plugin = i()\n        throw new Error(\n          'PostCSS plugin ' + plugin.postcssPlugin + ' requires PostCSS 8.\\n' +\n          'Migration guide for end-users:\\n' +\n          'https://github.com/postcss/postcss/wiki/PostCSS-8-for-end-users'\n        )\n      }\n\n      if (i.postcss) i = i.postcss\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n            'one of the syntax/parser/stringifier options as outlined ' +\n            'in your PostCSS runner documentation.'\n          )\n        }\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        throw new Error(\n          'PostCSS plugin ' + i.postcssPlugin + ' requires PostCSS 8.\\n' +\n          'Migration guide for end-users:\\n' +\n          'https://github.com/postcss/postcss/wiki/PostCSS-8-for-end-users'\n        )\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n}\n\nexport default Processor\n\n/**\n * @callback builder\n * @param {string} part          Part of generated CSS connected to this node.\n * @param {Node}   node          AST node.\n * @param {\"start\"|\"end\"} [type] Node’s part type.\n */\n\n/**\n * @callback parser\n *\n * @param {string|toString} css   String with input CSS or any object\n *                                with toString() method, like a Buffer.\n * @param {processOptions} [opts] Options with only `from` and `map` keys.\n *\n * @return {Root} PostCSS AST\n */\n\n/**\n * @callback stringifier\n *\n * @param {Node} node       Start node for stringifing. Usually {@link Root}.\n * @param {builder} builder Function to concatenate CSS from node’s parts\n *                          or generate string and source map.\n *\n * @return {void}\n */\n\n/**\n * @typedef {object} syntax\n * @property {parser} parse          Function to generate AST by string.\n * @property {stringifier} stringify Function to generate string by AST.\n */\n\n/**\n * @typedef {object} toString\n * @property {function} toString\n */\n\n/**\n * @callback pluginFunction\n * @param {Root} root     Parsed input CSS.\n * @param {Result} result Result to set warnings or check other plugins.\n */\n\n/**\n * @typedef {object} Plugin\n * @property {function} postcss PostCSS plugin function.\n */\n\n/**\n * @typedef {object} processOptions\n * @property {string} from             The path of the CSS source file.\n *                                     You should always set `from`,\n *                                     because it is used in source map\n *                                     generation and syntax error messages.\n * @property {string} to               The path where you’ll put the output\n *                                     CSS file. You should always set `to`\n *                                     to generate correct source maps.\n * @property {parser} parser           Function to generate AST by string.\n * @property {stringifier} stringifier Class to generate string by AST.\n * @property {syntax} syntax           Object with `parse` and `stringify`.\n * @property {object} map              Source map options.\n * @property {boolean} map.inline                    Does source map should\n *                                                   be embedded in the output\n *                                                   CSS as a base64-encoded\n *                                                   comment.\n * @property {string|object|false|function} map.prev Source map content\n *                                                   from a previous\n *                                                   processing step\n *                                                   (for example, Sass).\n *                                                   PostCSS will try to find\n *                                                   previous map automatically,\n *                                                   so you could disable it by\n *                                                   `false` value.\n * @property {boolean} map.sourcesContent            Does PostCSS should set\n *                                                   the origin content to map.\n * @property {string|false} map.annotation           Does PostCSS should set\n *                                                   annotation comment to map.\n * @property {string} map.from                       Override `from` in map’s\n *                                                   sources`.\n */\n", "/**\n * Contains helpers for working with vendor prefixes.\n *\n * @example\n * const vendor = postcss.vendor\n *\n * @namespace vendor\n */\nlet vendor = {\n\n  /**\n   * Returns the vendor prefix extracted from an input string.\n   *\n   * @param {string} prop String with or without vendor prefix.\n   *\n   * @return {string} vendor prefix or empty string\n   *\n   * @example\n   * postcss.vendor.prefix('-moz-tab-size') //=> '-moz-'\n   * postcss.vendor.prefix('tab-size')      //=> ''\n   */\n  prefix (prop) {\n    let match = prop.match(/^(-\\w+-)/)\n    if (match) {\n      return match[0]\n    }\n\n    return ''\n  },\n\n  /**\n     * Returns the input string stripped of its vendor prefix.\n     *\n     * @param {string} prop String with or without vendor prefix.\n     *\n     * @return {string} String name without vendor prefixes.\n     *\n     * @example\n     * postcss.vendor.unprefixed('-moz-tab-size') //=> 'tab-size'\n     */\n  unprefixed (prop) {\n    return prop.replace(/^-\\w+-/, '')\n  }\n\n}\n\nexport default vendor\n", "import Declaration from './declaration'\nimport Processor from './processor'\nimport stringify from './stringify'\nimport Comment from './comment'\nimport AtRule from './at-rule'\nimport vendor from './vendor'\nimport parse from './parse'\nimport list from './list'\nimport Rule from './rule'\nimport Root from './root'\n\n/**\n * Create a new {@link Processor} instance that will apply `plugins`\n * as CSS processors.\n *\n * @param {Array.<Plugin|pluginFunction>|Processor} plugins PostCSS plugins.\n *        See {@link Processor#use} for plugin format.\n *\n * @return {Processor} Processor to process multiple CSS.\n *\n * @example\n * import postcss from 'postcss'\n *\n * postcss(plugins).process(css, { from, to }).then(result => {\n *   console.log(result.css)\n * })\n *\n * @namespace postcss\n */\nfunction postcss (...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\n/**\n * Creates a PostCSS plugin with a standard API.\n *\n * The newly-wrapped function will provide both the name and PostCSS\n * version of the plugin.\n *\n * ```js\n * const processor = postcss([replace])\n * processor.plugins[0].postcssPlugin  //=> 'postcss-replace'\n * processor.plugins[0].postcssVersion //=> '6.0.0'\n * ```\n *\n * The plugin function receives 2 arguments: {@link Root}\n * and {@link Result} instance. The function should mutate the provided\n * `Root` node. Alternatively, you can create a new `Root` node\n * and override the `result.root` property.\n *\n * ```js\n * const cleaner = postcss.plugin('postcss-cleaner', () => {\n *   return (root, result) => {\n *     result.root = postcss.root()\n *   }\n * })\n * ```\n *\n * As a convenience, plugins also expose a `process` method so that you can use\n * them as standalone tools.\n *\n * ```js\n * cleaner.process(css, processOpts, pluginOpts)\n * // This is equivalent to:\n * postcss([ cleaner(pluginOpts) ]).process(css, processOpts)\n * ```\n *\n * Asynchronous plugins should return a `Promise` instance.\n *\n * ```js\n * postcss.plugin('postcss-import', () => {\n *   return (root, result) => {\n *     return new Promise( (resolve, reject) => {\n *       fs.readFile('base.css', (base) => {\n *         root.prepend(base)\n *         resolve()\n *       })\n *     })\n *   }\n * })\n * ```\n *\n * Add warnings using the {@link Node#warn} method.\n * Send data to other plugins using the {@link Result#messages} array.\n *\n * ```js\n * postcss.plugin('postcss-caniuse-test', () => {\n *   return (root, result) => {\n *     root.walkDecls(decl => {\n *       if (!caniuse.support(decl.prop)) {\n *         decl.warn(result, 'Some browsers do not support ' + decl.prop)\n *       }\n *     })\n *   }\n * })\n * ```\n *\n * @param {string} name          PostCSS plugin name. Same as in `name`\n *                               property in `package.json`. It will be saved\n *                               in `plugin.postcssPlugin` property.\n * @param {function} initializer Will receive plugin options\n *                               and should return {@link pluginFunction}\n *\n * @return {Plugin} PostCSS plugin.\n */\npostcss.plugin = function plugin (name, initializer) {\n  function creator (...args) {\n    let transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = (new Processor()).version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get () {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts)\n  }\n\n  return creator\n}\n\n/**\n * Default function to convert a node tree into a CSS string.\n *\n * @param {Node} node       Start node for stringifing. Usually {@link Root}.\n * @param {builder} builder Function to concatenate CSS from node’s parts\n *                          or generate string and source map.\n *\n * @return {void}\n *\n * @function\n */\npostcss.stringify = stringify\n\n/**\n * Parses source css and returns a new {@link Root} node,\n * which contains the source CSS nodes.\n *\n * @param {string|toString} css   String with input CSS or any object\n *                                with toString() method, like a Buffer\n * @param {processOptions} [opts] Options with only `from` and `map` keys.\n *\n * @return {Root} PostCSS AST.\n *\n * @example\n * // Simple CSS concatenation with source map support\n * const root1 = postcss.parse(css1, { from: file1 })\n * const root2 = postcss.parse(css2, { from: file2 })\n * root1.append(root2).toResult().css\n *\n * @function\n */\npostcss.parse = parse\n\n/**\n * Contains the {@link vendor} module.\n *\n * @type {vendor}\n *\n * @example\n * postcss.vendor.unprefixed('-moz-tab') //=> ['tab']\n */\npostcss.vendor = vendor\n\n/**\n * Contains the {@link list} module.\n *\n * @member {list}\n *\n * @example\n * postcss.list.space('5px calc(10% + 5px)') //=> ['5px', 'calc(10% + 5px)']\n */\npostcss.list = list\n\n/**\n * Creates a new {@link Comment} node.\n *\n * @param {object} [defaults] Properties for the new node.\n *\n * @return {Comment} New comment node\n *\n * @example\n * postcss.comment({ text: 'test' })\n */\npostcss.comment = defaults => new Comment(defaults)\n\n/**\n * Creates a new {@link AtRule} node.\n *\n * @param {object} [defaults] Properties for the new node.\n *\n * @return {AtRule} new at-rule node\n *\n * @example\n * postcss.atRule({ name: 'charset' }).toString() //=> \"@charset\"\n */\npostcss.atRule = defaults => new AtRule(defaults)\n\n/**\n * Creates a new {@link Declaration} node.\n *\n * @param {object} [defaults] Properties for the new node.\n *\n * @return {Declaration} new declaration node\n *\n * @example\n * postcss.decl({ prop: 'color', value: 'red' }).toString() //=> \"color: red\"\n */\npostcss.decl = defaults => new Declaration(defaults)\n\n/**\n * Creates a new {@link Rule} node.\n *\n * @param {object} [defaults] Properties for the new node.\n *\n * @return {Rule} new rule node\n *\n * @example\n * postcss.rule({ selector: 'a' }).toString() //=> \"a {\\n}\"\n */\npostcss.rule = defaults => new Rule(defaults)\n\n/**\n * Creates a new {@link Root} node.\n *\n * @param {object} [defaults] Properties for the new node.\n *\n * @return {Root} new root node.\n *\n * @example\n * postcss.root({ after: '\\n' }).toString() //=> \"\\n\"\n */\npostcss.root = defaults => new Root(defaults)\n\nexport default postcss\n", "'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    if(a===b) {\n      return [ai, bi];\n    }\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n", "import postcss, { plugin } from 'postcss';\nimport balanced from 'balanced-match';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction kebabify(prop) {\n  const upperToHyphen = (match, offset, string) => {\n    const addDash = offset && string.charAt(offset - 1) !== '-';\n    return (addDash ? '-' : '') + match.toLowerCase();\n  };\n\n  return prop.replace(/[A-Z]/g, upperToHyphen);\n}\nconst isPlainObject = arg => Object.prototype.toString.call(arg) === '[object Object]';\n\nconst RE_PROP_SET = /^(--)([\\w-]+)(\\s*)([:]?)$/;\nclass Visitor {\n  constructor(options) {\n    _defineProperty(this, \"cache\", {});\n\n    _defineProperty(this, \"result\", {});\n\n    _defineProperty(this, \"options\", {});\n\n    _defineProperty(this, \"defaults\", {\n      preserve: false,\n      sets: {}\n    });\n\n    _defineProperty(this, \"prepend\", () => {\n      const {\n        sets\n      } = this.options;\n      Object.keys(sets).forEach(setName => {\n        const newRule = postcss.rule({\n          selector: `--${setName}`\n        });\n        const set = sets[setName];\n\n        if (typeof set === 'string') {\n          newRule.prepend(set);\n        } else if (isPlainObject(set)) {\n          Object.entries(set).forEach(([prop, value]) => {\n            newRule.prepend(postcss.decl({\n              prop: kebabify(prop),\n              value\n            }));\n          });\n        } else {\n          throw new Error(`Unrecognized set type \\`${typeof set}\\`, must be an object or string.`);\n        }\n\n        this.cache[setName] = newRule;\n      });\n    });\n\n    _defineProperty(this, \"collect\", rule => {\n      const matches = RE_PROP_SET.exec(rule.selector);\n\n      if (!matches) {\n        return;\n      }\n\n      const setName = matches[2];\n      const {\n        parent\n      } = rule;\n\n      if (parent.selector !== ':root') {\n        rule.warn(this.result, 'Custom property set ignored: not scoped to top-level `:root` ' + `(--${setName}` + `${parent.type === 'rule' ? ` declared in ${parent.selector}` : ''})`);\n\n        if (parent.type === 'root') {\n          rule.remove();\n        }\n\n        return;\n      } // Custom property sets override each other wholly,\n      // rather than cascading together like colliding style rules do.\n      // @see: https://tabatkins.github.io/specs/css-apply-rule/#defining\n\n\n      const newRule = rule.clone();\n      this.cache[setName] = newRule;\n\n      if (!this.options.preserve) {\n        removeCommentBefore(rule);\n        safeRemoveRule(rule);\n      }\n\n      if (!parent.nodes.length) {\n        parent.remove();\n      }\n    });\n\n    _defineProperty(this, \"resolveNested\", () => {\n      Object.keys(this.cache).forEach(rule => {\n        this.cache[rule].walkAtRules('apply', atRule => {\n          this.resolve(atRule); // @TODO honor `preserve` option.\n\n          atRule.remove();\n        });\n      });\n    });\n\n    _defineProperty(this, \"resolve\", atRule => {\n      let ancestor = atRule.parent;\n\n      while (ancestor && ancestor.type !== 'rule') {\n        ancestor = ancestor.parent;\n      }\n\n      if (!ancestor) {\n        atRule.warn(this.result, 'The @apply rule can only be declared inside Rule type nodes.');\n        atRule.remove();\n        return;\n      }\n\n      if (isDefinition(atRule.parent)) {\n        return;\n      }\n\n      const param = getParamValue(atRule.params);\n      const matches = RE_PROP_SET.exec(param);\n\n      if (!matches) {\n        return;\n      }\n\n      const setName = matches[2];\n      const {\n        parent\n      } = atRule;\n\n      if (!(setName in this.cache)) {\n        atRule.warn(this.result, `No custom property set declared for \\`${setName}\\`.`);\n        return;\n      }\n\n      const newRule = this.cache[setName].clone();\n      cleanIndent(newRule);\n\n      if (this.options.preserve) {\n        parent.insertBefore(atRule, newRule.nodes);\n        return;\n      }\n\n      atRule.replaceWith(newRule.nodes);\n    });\n\n    this.options = _objectSpread({}, this.defaults, options);\n  }\n  /**\n   * Prepend JS defined sets into the cache before parsing.\n   * This means CSS defined sets will overrides them if they share the same name.\n   */\n\n\n}\n/**\n * Helper: return whether the rule is a custom property set definition.\n */\n\nfunction isDefinition(rule) {\n  return !!rule.selector && !!RE_PROP_SET.exec(rule.selector) && rule.parent && !!rule.parent.selector && rule.parent.selector === ':root';\n}\n/**\n * Helper: allow parens usage in `@apply` AtRule declaration.\n * This is for Polymer integration.\n */\n\n\nfunction getParamValue(param) {\n  return /^\\(/.test(param) ? balanced('(', ')', param).body : param;\n}\n/**\n * Helper: remove excessive declarations indentation.\n */\n\n\nfunction cleanIndent(rule) {\n  rule.walkDecls(decl => {\n    if (typeof decl.raws.before === 'string') {\n      decl.raws.before = decl.raws.before.replace(/[^\\S\\n\\r]{2,}/, '  ');\n    }\n  });\n}\n/**\n * Helper: correctly handle property sets removal and semi-colons.\n * @See: postcss/postcss#1014\n */\n\n\nfunction safeRemoveRule(rule) {\n  if (rule === rule.parent.last && rule.raws.ownSemicolon) {\n    rule.parent.raws.semicolon = true;\n  }\n\n  rule.remove();\n}\n/**\n * Helper: remove immediate preceding comments.\n */\n\n\nfunction removeCommentBefore(node) {\n  const previousNode = node.prev();\n\n  if (previousNode && previousNode.type === 'comment') {\n    previousNode.remove();\n  }\n}\n\nvar name = \"postcss-apply\";\n\nvar index = plugin(name, options => (css, result) => {\n  const visitor = new Visitor(options);\n  visitor.result = result;\n  visitor.prepend();\n  css.walkRules(visitor.collect);\n  visitor.resolveNested();\n  css.walkAtRules('apply', visitor.resolve);\n});\n\nexport default index;\n"],
  "mappings": "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",
  "names": ["CssSyntaxError", "message", "line", "column", "source", "file", "plugin", "name", "reason", "setMessage", "Error", "captureStackTrace", "showSourceCode", "color", "css", "terminalHighlight", "pico", "isColorSupported", "lines", "split", "start", "Math", "max", "end", "min", "length", "maxWidth", "String", "mark", "text", "red", "bold", "aside", "gray", "slice", "map", "index", "number", "gutter", "spacing", "replace", "join", "toString", "code", "DEFAULT_RAW", "colon", "indent", "beforeDecl", "beforeRule", "beforeOpen", "beforeClose", "beforeComment", "after", "emptyBody", "commentLeft", "commentRight", "semicolon", "capitalize", "str", "toUpperCase", "slice", "Stringifier", "builder", "stringify", "node", "type", "root", "body", "raws", "comment", "left", "raw", "right", "text", "decl", "between", "string", "prop", "rawValue", "important", "rule", "block", "ownSemicolon", "atrule", "name", "params", "afterName", "nodes", "end", "last", "length", "i", "child", "before", "start", "own", "detect", "value", "parent", "first", "rawCache", "beforeAfter", "method", "walk", "rawSemicolon", "rawEmptyBody", "rawIndent", "p", "parts", "split", "replace", "rawBeforeComment", "walkComments", "indexOf", "rawBeforeDecl", "walkDecls", "rawBeforeRule", "rawBeforeClose", "rawBeforeOpen", "rawColon", "buf", "depth", "step", "stringify", "node", "builder", "str", "Stringifier", "cloneNode", "obj", "parent", "cloned", "constructor", "i", "hasOwnProperty", "value", "type", "Array", "map", "j", "Node", "defaults", "raws", "process", "Error", "JSON", "stringify", "name", "error", "message", "opts", "source", "pos", "positionBy", "input", "line", "column", "CssSyntaxError", "warn", "result", "text", "data", "node", "remove", "removeChild", "undefined", "toString", "stringifier", "clone", "overrides", "cloneBefore", "insertBefore", "cloneAfter", "insertAfter", "replaceWith", "nodes", "next", "index", "prev", "before", "add", "after", "toJSON", "fixed", "raw", "prop", "defaultType", "str", "Stringifier", "root", "cleanRaws", "keepBetween", "between", "positionInside", "string", "start", "word", "indexOf", "Declaration", "defaults", "type", "Node", "index", "name", "sourceFile", "index", "index", "name", "needle", "section", "MapGenerator", "stringify", "root", "opts", "mapOpts", "map", "isMap", "previous", "length", "previousMaps", "walk", "node", "source", "input", "indexOf", "push", "isInline", "inline", "annotation", "some", "i", "isSourcesContent", "sourcesContent", "withContent", "clearAnnotation", "nodes", "type", "text", "removeChild", "setSourcesContent", "already", "from", "relative", "setSourceContent", "css", "applyPrevMaps", "prev", "file", "path", "dirname", "mozilla", "SourceMapConsumer", "consumer", "applySourceMap", "isAnnotation", "toBase64", "str", "Buffer", "toString", "window", "btoa", "unescape", "encodeURIComponent", "addAnnotation", "content", "outputFile", "eol", "to", "generateMap", "generateString", "test", "resolve", "sep", "replace", "sourcePath", "SourceMapGenerator", "line", "column", "lines", "last", "start", "addMapping", "generated", "original", "match", "lastIndexOf", "p", "parent", "raws", "semicolon", "end", "generate", "result", "printed", "warnOnce", "message", "console", "warn", "Warning", "text", "opts", "type", "node", "source", "pos", "positionBy", "line", "column", "opt", "toString", "error", "plugin", "index", "word", "message", "Result", "processor", "root", "opts", "messages", "css", "undefined", "map", "toString", "warn", "text", "plugin", "lastPlugin", "postcssPlugin", "warning", "Warning", "push", "warnings", "filter", "i", "type", "SINGLE_QUOTE", "charCodeAt", "DOUBLE_QUOTE", "BACKSLASH", "SLASH", "NEWLINE", "SPACE", "FEED", "TAB", "CR", "OPEN_SQUARE", "CLOSE_SQUARE", "OPEN_PARENTHESES", "CLOSE_PARENTHESES", "OPEN_CURLY", "CLOSE_CURLY", "SEMICOLON", "ASTERISK", "COLON", "AT", "RE_AT_END", "RE_WORD_END", "RE_BAD_BRACKET", "RE_HEX_ESCAPE", "tokenizer", "input", "options", "css", "valueOf", "ignore", "ignoreErrors", "code", "next", "quote", "lines", "last", "content", "escape", "nextLine", "nextOffset", "escaped", "escapePos", "prev", "n", "currentToken", "length", "offset", "line", "pos", "buffer", "returned", "position", "unclosed", "what", "error", "endOfFile", "nextToken", "opts", "pop", "ignoreUnclosed", "slice", "controlChar", "String", "fromCharCode", "indexOf", "test", "split", "lastIndex", "charAt", "push", "back", "token", "Comment", "defaults", "type", "Node", "list", "split", "string", "separators", "last", "array", "current", "func", "quote", "escape", "i", "length", "letter", "indexOf", "push", "trim", "space", "spaces", "comma", "Rule", "defaults", "type", "nodes", "list", "comma", "selector", "values", "match", "sep", "raw", "join", "Container", "cleanSource", "nodes", "map", "i", "source", "Container", "push", "child", "parent", "each", "callback", "lastEach", "indexes", "id", "undefined", "index", "result", "length", "walk", "e", "postcssNode", "stack", "test", "s", "replace", "input", "from", "start", "line", "column", "walkDecls", "prop", "type", "RegExp", "walkRules", "selector", "walkAtRules", "name", "walkComments", "append", "children", "normalize", "last", "node", "prepend", "reverse", "first", "unshift", "cleanRaws", "keepBetween", "insertBefore", "exist", "add", "splice", "insertAfter", "removeChild", "removeAll", "replaceValues", "pattern", "opts", "decl", "props", "indexOf", "fast", "value", "every", "condition", "some", "sample", "parse", "require", "Array", "isArray", "slice", "Error", "String", "Declaration", "Rule", "AtRule", "text", "Comment", "processed", "raws", "before", "Node", "AtRule", "defaults", "type", "append", "nodes", "children", "prepend", "Container", "Root", "defaults", "type", "nodes", "removeChild", "child", "ignore", "index", "length", "raws", "before", "normalize", "sample", "first", "node", "toResult", "opts", "LazyResult", "require", "Processor", "lazy", "stringify", "Container", "Parser", "input", "root", "Root", "current", "spaces", "semicolon", "createTokenizer", "source", "start", "line", "column", "tokenizer", "parse", "token", "endOfFile", "nextToken", "freeSemicolon", "end", "comment", "atrule", "emptyRule", "other", "endFile", "node", "Comment", "init", "text", "slice", "test", "raws", "left", "right", "match", "Rule", "selector", "between", "type", "colon", "bracket", "brackets", "tokens", "push", "length", "decl", "rule", "back", "pop", "unclosedBracket", "unknownWord", "spacesAndCommentsFromEnd", "raw", "Declaration", "last", "before", "shift", "prop", "spacesAndCommentsFromStart", "precheckMissedSemicolon", "i", "toLowerCase", "important", "string", "stringFrom", "spacesFromEnd", "cache", "str", "j", "trim", "indexOf", "value", "checkMissedSemicolon", "AtRule", "name", "unnamedAtrule", "prev", "open", "params", "afterName", "nodes", "after", "parent", "unexpectedClose", "unclosedBlock", "ownSemicolon", "clean", "next", "pattern", "reduce", "all", "lastTokenType", "from", "result", "splice", "doubleColon", "error", "pos", "founded", "fromBase64", "str", "Buffer", "from", "toString", "window", "atob", "PreviousMap", "css", "opts", "loadAnnotation", "inline", "startWith", "annotation", "prev", "map", "undefined", "text", "loadMap", "consumer", "consumerCache", "mozilla", "SourceMapConsumer", "withContent", "sourcesContent", "length", "string", "start", "substr", "getAnnotationURL", "sourceMapString", "match", "trim", "annotations", "lastAnnotation", "decodeInline", "baseCharsetUri", "baseUri", "uri", "decodeURIComponent", "test", "RegExp", "lastMatch", "encoding", "Error", "file", "prevPath", "fs", "existsSync", "readFileSync", "SourceMapGenerator", "fromSourceMap", "isMap", "JSON", "stringify", "path", "join", "dirname", "root", "mappings", "_mappings", "sequence", "Input", "css", "opts", "toString", "Error", "hasBOM", "slice", "from", "test", "path", "isAbsolute", "file", "resolve", "map", "PreviousMap", "text", "consumer", "mapResolve", "id", "error", "message", "line", "column", "result", "origin", "CssSyntaxError", "source", "plugin", "input", "originalPositionFor", "sourceContentFor", "sourceRoot", "parse", "css", "opts", "input", "Input", "parser", "Parser", "e", "process", "name", "from", "test", "message", "root", "isPromise", "obj", "then", "LazyResult", "processor", "css", "opts", "stringified", "processed", "root", "type", "Result", "map", "inline", "prev", "parser", "parse", "syntax", "error", "result", "warnings", "sync", "toString", "onFulfilled", "onRejected", "process", "async", "catch", "finally", "onFinally", "handleError", "plugin", "name", "postcssPlugin", "setMessage", "postcssVersion", "pluginName", "pluginVer", "runtimeVer", "version", "a", "split", "b", "parseInt", "console", "err", "asyncTick", "resolve", "reject", "plugins", "length", "promise", "run", "Promise", "stringify", "processing", "Error", "lastPlugin", "str", "stringifier", "MapGenerator", "data", "generate", "content", "messages", "Processor", "plugins", "version", "normalize", "use", "plugin", "concat", "process", "css", "opts", "length", "parser", "stringifier", "console", "warn", "LazyResult", "normalized", "i", "postcss", "Error", "postcssPlugin", "Array", "isArray", "push", "parse", "stringify", "vendor", "prefix", "prop", "match", "unprefixed", "replace", "postcss", "plugins", "length", "Array", "isArray", "Processor", "plugin", "name", "initializer", "creator", "transformer", "postcssPlugin", "postcssVersion", "version", "cache", "Object", "defineProperty", "get", "process", "css", "processOpts", "pluginOpts", "stringify", "parse", "vendor", "list", "comment", "defaults", "Comment", "atRule", "AtRule", "decl", "Declaration", "rule", "Rule", "root", "Root", "balanced", "postcss", "balanced"]
}
